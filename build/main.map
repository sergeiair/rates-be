{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"realm\"","webpack:///external \"koa-trie-router\"","webpack:///external \"ramda\"","webpack:///external \"koa-mount\"","webpack:///external \"bcrypt\"","webpack:///external \"md5\"","webpack:///external \"node-schedule\"","webpack:///external \"koa-static\"","webpack:///external \"koa-bodyparser\"","webpack:///external \"uuid\"","webpack:///external \"fs\"","webpack:///external \"@tensorflow/tfjs-node\"","webpack:///external \"axios\"","webpack:///external \"nodemailer\"","webpack:///external \"@koa/cors\"","webpack:///external \"koa-session-auth\"","webpack:///external \"koa\"","webpack:///./config/index.js","webpack:///./logger/AppLogger.js","webpack:///./tf/predictionTFService.js","webpack:///./modules/rates-scheduler/constants.js","webpack:///./static/rates.js","webpack:///./db/schemes/prediction.js","webpack:///./db/schemes/user.js","webpack:///./db/helpers/responseWrapper.js","webpack:///./db/schemes/session.js","webpack:///./modules/users/data.service.js","webpack:///./utils/hash.js","webpack:///./utils/session.js","webpack:///./guards/authMiddlware.js","webpack:///./modules/users/sessionController.js","webpack:///./modules/predictions/_routes/index.js","webpack:///./modules/predictions/controller.js","webpack:///./modules/predictions/data.service.js","webpack:///./modules/predictions/index.js","webpack:///./modules/rates-scheduler/rates-scheduler.service.js","webpack:///./db/schemes/rates.js","webpack:///./modules/rates-scheduler/_routes/index.js","webpack:///./modules/rates-scheduler/controller.js","webpack:///./modules/rates-scheduler/data.service.js","webpack:///./modules/rates-scheduler/index.js","webpack:///./modules/predictions-scheduler/predictions-scheduler.service.js","webpack:///./modules/predictions-scheduler/_routes/index.js","webpack:///./modules/predictions-scheduler/controller.js","webpack:///./modules/predictions-scheduler/data.service.js","webpack:///./modules/predictions-scheduler/index.js","webpack:///./modules/rates/_routes/index.js","webpack:///./modules/rates/controller.js","webpack:///./modules/rates/data.service.js","webpack:///./modules/rates/index.js","webpack:///./mailer/mailer.js","webpack:///./modules/users/_routes/index.js","webpack:///./modules/users/controller.js","webpack:///./utils/email.js","webpack:///./modules/users/index.js","webpack:///./utils/network.js","webpack:///./modules/analyze/_routes/index.js","webpack:///./modules/analyze/controller.js","webpack:///./modules/analyze/data.service.js","webpack:///./modules/analyze/index.js","webpack:///./modules/stats/_routes/index.js","webpack:///./modules/stats/controller.js","webpack:///./modules/stats/data.service.js","webpack:///./modules/stats/index.js","webpack:///./routes.js","webpack:///./middlewares.js","webpack:///./main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","port","root","options","fs","AppLogger","error","is","stack","this","logFile","write","split","toString","message","String","e","console","createWriteStream","flags","process","stdout","tf","PredictionTFService","constructor","data","sequential","configure","init","getPrediction","params","inputMax","inputMinVal","labelMinVal","labelMax","tidy","normalizedPredVals","tensor2d","length","sub","div","model","predict","reshape","mul","add","dataSync","getNormalizedValues","inputTnsr","max","min","labelTnsr","inputs","labels","items","_data","initTensors","util","shuffle","initInputTnsr","initLabelsTnsr","tensor","map","item","volatility","forecast","realRate","predRate","finalRate","layers","dense","units","inputShape","useBias","compile","loss","optimizer","destroy","dispose","trainModel","epochs","batchSize","Promise","resolve","reject","isRunning","fit","then","PAIRS","StaticRatesStore","_latestRates","keys","reduce","acc","curr","rates","latestRates","Date","now","prevSet","requiredMsGap","some","pair","PredictionSchema","primaryKey","properties","id","owner","time","verifyTime","UserSchema","email","type","indexed","pw","restoreToken","default","active","ResponseWrapper","isObject","_code","err","_error","code","a","SessionSchema","expired","info","UsersDataService","schema","deleteRealmIfMigrationNeeded","path","getUserUnsafe","Realm","open","userConfig","realm","objectForPrimaryKey","catch","getSession","sessionConfig","response","user","bcrypt","hashedEmail","md5","storeSession","ip","maxAge","UpdateMode","Modified","close","destroySession","session","delete","emailToRestoreToken","token","status","registerUser","objects","filtered","isEmpty","Never","getUserEmailFromSession","ctx","controller","_dataServiceInstance","dataService","authMiddleware","async","next","isNew","storedSession","router","getAll","clearAll","storeSingle","getPreparedPredData","verifySingle","getVolatilityByPair","predictions","getAllCompletedPredictions","data4TF","pred","tfsService","undefined","getComputedPrediction","getResult","config","sorted","preds","uuidv1","prediction","isUserValid","replace","parseFloat","dissoc","Router","del","body","middleware","post","request","result","prepareTFService","axios","scheduler","RatesSchedulerService","join","currency","job","instance","scheduleJob","requestData","cancelJob","isRequiredTimePassed","updatePrevRequestTime","log","toLocaleTimeString","endpoint","requestPairs","dataFetched","RateSchema","EURUSD","EURPLN","EURCHF","EURGBP","USDNOK","GBPUSD","USDRUB","USDCHF","USDPLN","USDJPY","bindSchedulerService","enable","start","requestDataImidiate","getStatus","isSaveAllowed","price","updateStaticStore","updateLocalLatest","isNewValue","getStorageRatesValues","toISOString","PredictionsSchedulerService","startPendingItemsReview","fillPendingPredictions","ratesHaveValue","currentEpoch","pendingItems","forEach","getHistory","number","slice","limit","query","nodemailer","Mailer","to","html","emailTransporter","sendMail","from","subject","text","createTransport","host","service","secure","auth","pass","debug","logger","register","getUser","getRestoreToken","sendPwReset","createPw","set","resp","headers","initRestore","v","_tfsInstance","dateStart","dateEnd","getStats","all","getUsersCount","getPredsCount","getHistoryCount","ratesConfig","usersConfig","predsConfig","cors","mount","useToken","useCookie","autoCommit","overwrite","httpOnly","signed","rolling","renew","genid","warn","app","env","HOST","PORT","use","throw","emit","bodyParser","serve","ratesScheduler","predictionsScheduler","users","analyze","stats","on","listen"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","module.exports = require(\"realm\");","module.exports = require(\"koa-trie-router\");","module.exports = require(\"ramda\");","module.exports = require(\"koa-mount\");","module.exports = require(\"bcrypt\");","module.exports = require(\"md5\");","module.exports = require(\"node-schedule\");","module.exports = require(\"koa-static\");","module.exports = require(\"koa-bodyparser\");","module.exports = require(\"uuid\");","module.exports = require(\"fs\");","module.exports = require(\"@tensorflow/tfjs-node\");","module.exports = require(\"axios\");","module.exports = require(\"nodemailer\");","module.exports = require(\"@koa/cors\");","module.exports = require(\"koa-session-auth\");","module.exports = require(\"koa\");","'use strict';\n\nexport default {\n  app: {\n    name: 'Koa',\n    version: '1.0.0'\n  },\n  server: {\n    port: 3333\n  },\n  static_dir: {\n    root: './static',\n    options: {}\n  },\n}\n","import {is} from \"ramda\";\n\n\nconst fs = require('fs');\n\nexport class AppLogger {\n\n    static logFile = fs.createWriteStream('./logger/files/log', { flags: 'a' });\n    static logStdout = process.stdout;\n\n    static error(error) {\n        try {\n            if (is(Object, error)) {\n                if (error.stack) {\n                    this.logFile.write(`${error.stack.split(')')[0]} \\n`);\n                } else if (!error.stack) {\n                    this.logFile.write(`${error.message} \\n`);\n                } else {\n                    this.logFile.write(`Unknown error ${error.toString()} \\n`);\n                }\n            } else if (is(String, error)) {\n                this.logFile.write(`${error} \\n`);\n            }\n        } catch (e) {\n            console.error(e.message);\n        }\n    }\n}\n","import {AppLogger} from \"../logger\";\n\nconst tf = require('@tensorflow/tfjs-node');\n\nexport class PredictionTFService {\n\n    isRunning = false;\n\n    model = tf.sequential();\n\n    inputTnsr = null;\n    labelTnsr = null;\n\n    _data = [];\n\n    constructor(data) {\n        this.configure();\n        this.init(data);\n    }\n\n    getPrediction(params, inputMax, inputMinVal, labelMinVal, labelMax) {\n        return tf.tidy(() => {\n            const normalizedPredTnsr = tf.tensor2d(params, [1, params.length]);\n            const normalizedPredVals = normalizedPredTnsr.sub(inputMinVal).div(inputMax.sub(inputMinVal));\n            const predResult = this.model.predict(normalizedPredVals.reshape([1, params.length]));\n            const readablePred = predResult.mul(labelMax.sub(labelMinVal)).add(labelMinVal);\n\n            return readablePred.dataSync();\n        });\n    }\n\n    getNormalizedValues() {\n        return tf.tidy(() => {\n            const inputMax = this.inputTnsr.max();\n            const inputMinVal = this.inputTnsr.min();\n            const labelMax = this.labelTnsr.max();\n            const labelMinVal = this.labelTnsr.min();\n\n            return {\n                inputs: this.inputTnsr.sub(inputMinVal).div(inputMax.sub(inputMinVal)),\n                labels: this.labelTnsr.sub(labelMinVal).div(labelMax.sub(labelMinVal)),\n                inputMax,\n                inputMinVal,\n                labelMax,\n                labelMinVal,\n            }\n        });\n    }\n\n    init(items) {\n        this._data = items || [];\n\n        this.initTensors();\n    }\n\n    initTensors() {\n        tf.util.shuffle(this._data);\n        this.initInputTnsr();\n        this.initLabelsTnsr();\n    }\n\n    initInputTnsr() {\n        this.inputTnsr = tf.tensor(this._data.map((item) => ([\n            item.volatility, item.forecast, item.realRate, item.predRate\n        ])));\n    }\n\n    initLabelsTnsr() {\n        this.labelTnsr = tf.tensor2d(\n            this._data.map((item) => item.finalRate\n        ), [this._data.length, 1]);\n    }\n\n    configure() {\n        this.model.add(tf.layers.dense({ units: 1, inputShape: [4] }));\n        this.model.add(tf.layers.dense({ units: 1, useBias: true }));\n        this.model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n    }\n\n    destroy() {\n        this.model.dispose()\n    }\n\n    async getResult(params) {\n        const { inputMax, inputMinVal, labelMinVal, labelMax } = this.getNormalizedValues();\n\n        return this.getPrediction(params, inputMax, inputMinVal, labelMinVal, labelMax);\n    }\n\n    trainModel(epochs, batchSize) {\n        const { inputs, labels } = this.getNormalizedValues();\n\n        return new Promise((resolve, reject) => {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.model.fit(inputs, labels, {\n                    batchSize,\n                    epochs\n                }).then(() => {\n                    this.isRunning = false;\n                    resolve('trainingDone');\n                });\n            }\n        });\n    }\n\n\n\n}\n","\nconst API_KEY = 'WtgXjLLRpYZqNwOOXId0';\n\nexport const DATA_SOURCE_ENDPOINT = 'https://fxmarketapi.com/apilive?api_key=' + API_KEY;\n\nexport const PAIRS = [\n    'EUR/USD', 'EUR/PLN', 'EUR/CHF', 'EUR/GBP',\n    'USD/NOK', 'GBP/USD', 'USD/RUB', 'USD/CHF',\n    'USD/PLN', 'USD/JPY'\n];\n","\nimport {PAIRS} from \"../modules/rates-scheduler/constants\";\n\nexport class StaticRatesStore {\n\n    static prevSet = Date.now();\n\n    static requiredMsGap = 5 * 60 * 1000;\n\n    static _latestRates = {};\n\n    static get latestRates() {\n        if (!this._latestRates || !Object.keys(this._latestRates).length) {\n            this._latestRates = PAIRS.reduce((acc, curr) => ({ ...acc, [curr]: 0 }), {});\n        }\n\n        return this._latestRates;\n    }\n\n    static set latestRates(value) {\n        this._latestRates = value;\n    }\n\n    static updateLocalLatest(rates) {\n        this.latestRates = rates;\n    }\n\n    static ratesHaveValue() {\n        return !!this.latestRates && !!Object.keys(this.latestRates).length;\n    }\n\n    static isRequiredTimePassed() {\n        return Date.now() - this.prevSet > this.requiredMsGap;\n    }\n\n    static updatePrevRequestTime() {\n        this.prevSet = Date.now();\n    }\n\n    static isNewValue(rates) {\n        return Object.keys(rates || {})\n            .some((pair) => rates[pair] !== this.latestRates[pair]);\n    }\n\n}\n","\nexport const PredictionSchema = {\n    name: 'Prediction',\n    primaryKey: 'id',\n    properties: {\n        id: 'string',\n        predRate: 'double',\n        realRate: 'double',\n        finalRate: 'double',\n        pair:  'string',\n        owner:  'string',\n        time: 'int',\n        verifyTime: 'int',\n        forecast: 'int',\n        volatility: 'int'\n    }\n};\n","\nexport const UserSchema = {\n    name: 'User',\n    primaryKey: 'email',\n    properties: {\n        id: 'int',\n        email: {type: 'string', indexed: true},\n        name: 'string',\n        pw: 'string',\n        restoreToken: {type: 'string', default: ''},\n        active: {type: 'bool', default: true}\n    }\n};\n","\nexport class ResponseWrapper {\n    _data = null;\n    _error = null;\n    _code = null;\n\n    set data(value) {\n        if (this.isObject(value)) {\n            this._data = { ...value };\n        }\n\n        this._code = 200;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    set error(err) {\n        this._error = err;\n        this._code = 503;\n    }\n\n    get code() {\n        return this._code;\n    }\n\n    set code(code) {\n        this._code = code;\n    }\n\n    isObject(a) {\n        return (!!a) && (a.constructor === Object);\n    };\n}\n","\nexport const SessionSchema = {\n    name: 'Session',\n    primaryKey: 'id',\n    properties: {\n        expired: 'int',\n        id: 'string',\n        info: 'string'\n    }\n};\n","import Realm from \"realm\";\nimport * as bcrypt from \"bcrypt\";\nimport {AppLogger} from \"../../logger\";\nimport {UserSchema} from \"../../db/schemes/user\";\nimport {ResponseWrapper} from \"../../db/helpers/responseWrapper\";\nimport {SessionSchema} from \"../../db/schemes/session\";\nimport {sessionConfig} from \"../../middlewares\";\nimport * as md5 from \"md5\";\nimport {emailToRestoreToken} from \"../../utils/hash\";\n\nexport default class UsersDataService {\n\n    userConfig = {\n        schema: [UserSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/users/01.realm',\n    };\n\n    sessionConfig = {\n        schema: [SessionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/sessions/01.realm',\n    };\n\n    getUserUnsafe(email) {\n        return Realm.open(this.userConfig)\n            .then(realm => realm.objectForPrimaryKey('User', email))\n            .catch((e) => AppLogger.error(e));\n    }\n\n    getSession(email) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => realm.objectForPrimaryKey('Session', email))\n            .catch((e) => AppLogger.error(e));\n    }\n\n    async getUser(data) {\n        const response = new ResponseWrapper();\n        const user = await this.getUserUnsafe(data.email);\n\n        if (!!user && bcrypt.compareSync(data.pw || '', user.pw || '')) {\n            response.data = {\n                hashedEmail: md5(user.email),\n                email: user.email,\n                name: user.name\n            };\n        } else {\n            response.error = 'Not found';\n            response.code = 404;\n        }\n\n        return response;\n    }\n\n    storeSession(email, ip) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => {\n                realm.write(() => {\n                    realm.create('Session', {\n                        expired: Date.now() + sessionConfig.maxAge,\n                        id: email,\n                        info: ip\n                    }, Realm.UpdateMode.Modified);\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    destroySession(email) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => {\n                const session = realm.objectForPrimaryKey('Session', email);\n\n                if (!!session) {\n                    realm.write(() => {\n                        realm.delete(session)\n                    });\n                }\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    async getRestoreToken(email) {\n        return new Promise(((resolve, reject) => {\n            Realm.open(this.userConfig)\n                .then(realm => {\n                    const response = new ResponseWrapper();\n                    const user = realm.objectForPrimaryKey('User', email);\n\n                    if (!!user && !user.restoreToken) {\n                        realm.write(() => {\n                            user.restoreToken = emailToRestoreToken(email);\n                            response.data = {\n                                token: user.restoreToken,\n                                name: user.name\n                            };\n\n                            resolve(response);\n                        });\n                    } else {\n                        response.data = {status: \"started\"};\n                        response.code = 208;\n                        resolve(response);\n                    }\n\n                    realm.close();\n                })\n                .catch((e) => {\n                    AppLogger.error(e);\n                    reject(e.message);\n                });\n        }));\n    }\n\n    registerUser(data) {\n        return Realm.open(this.userConfig)\n            .then(realm => {\n                const { email, pw, name } = data;\n                const response = new ResponseWrapper();\n                const userNotFound = realm.objects('User')\n                    .filtered(`email = \"${email}\"`).isEmpty();\n\n                if (userNotFound) {\n                    realm.write(() => {\n                        realm.create('User', {\n                            id: realm.objects('User').length + 1,\n                            pw: bcrypt.hashSync(pw, 10),\n                            name: name || email.split('@')[0],\n                            email: email\n                        }, Realm.UpdateMode.Never);\n\n                        response.data = { email };\n                    });\n                } else {\n                    response.error = 'User already exists';\n                    response.code = 200\n                }\n\n                realm.close();\n                return response;\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    async createPw(pw, token) {\n        return Realm.open(this.userConfig)\n            .then(realm => {\n                const response = new ResponseWrapper();\n                const user = realm.objects('User')\n                    .filtered(`restoreToken = \"${token}\" LIMIT(1)`);\n\n                if (user[0]) {\n                    realm.write(() => {\n                        user[0].pw = bcrypt.hashSync(pw, 10);\n                        user[0].restoreToken = \"\";\n\n                        response.data = { status: 'Done' };\n                    });\n                } else {\n                    response.error = 'Failed';\n                }\n\n                realm.close();\n                return response;\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","import * as bcrypt from \"bcrypt\";\n\nexport function emailToRestoreToken(email) {\n    return bcrypt.hashSync(email + \"_frvr3$R34gTgtr5_\", 5);\n}\n","\nexport function getUserEmailFromSession(ctx) {\n    return (ctx.session.user || '').split('$')[0];\n}\n","import UsersDataService from \"../modules/users/data.service\";\nimport SessionController from \"../modules/users/sessionController\";\nimport {getUserEmailFromSession} from \"../utils/session\";\nimport {getClientIp} from \"../utils/network\";\n\nconst controller = new SessionController(new UsersDataService());\n\nexport const authMiddleware = async (ctx, next) => {\n    if (ctx.session.isNew) {\n        ctx.data = null;\n        ctx.status = 401;\n    } else {\n        const storedSession = await controller.getSession(getUserEmailFromSession(ctx));\n\n        if (!storedSession || storedSession.expired <= Date.now()) {\n            ctx.data = null;\n            ctx.status = 401;\n        }\n    }\n\n    ctx.type = 'json';\n    await next()\n};\n","'use strict';\n\nexport default class SessionController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getSession(email) {\n        return this.dataService.getSession(email);\n    }\n\n\n}\n","'use strict';\n\nimport PredictionsController from \"../controller\";\nimport PredictionsDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport {dissoc, map} from \"ramda\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new PredictionsController(\n    new PredictionsDataService()\n);\n\nexport const create = () => {\n  router.post('/', authMiddleware, async (ctx, next) => {\n    try {\n      controller.storeSingle({\n        ...ctx.request.body,\n        owner: getUserEmailFromSession(ctx)\n      });\n\n      ctx.body = { message: 'Done!' };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const clearAll = () => {\n  router.del('/clear', authMiddleware, async (ctx, next) => {\n    try {\n      controller.clearAll(getUserEmailFromSession(ctx));\n\n      ctx.body = { message: 'Done!' };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const getAll = () => {\n  router.get('/', authMiddleware, async (ctx, next) => {\n    try {\n      const items = await controller.getAll(getUserEmailFromSession(ctx));\n\n      ctx.body = { message: 'Done fetch!', predictions: map(dissoc('owner'), items) };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const prepareTFS = () => {\n  router.post('/prepare-for-history', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.prepareTFService(\n          ctx.request.body,\n          getUserEmailFromSession(ctx)\n      );\n\n      ctx.body = { message: 'Done!', status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const verifySingle = () => {\n  router.post('/verify', authMiddleware, async (ctx, next) => {\n    try {\n      const data = await controller.verifySingle(\n          ctx.request.body,\n          getUserEmailFromSession(ctx)\n      );\n\n      ctx.body = { message: 'Done!', data };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const getPredRateByHistory = () => {\n  router.post('/compute-current', authMiddleware, async (ctx, next) => {\n    try {\n      const result = await controller.getComputedPrediction(\n          ctx.request.body\n      );\n\n      ctx.body = { message: 'Done!', result };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n","'use strict';\n\nimport {PredictionTFService} from \"../../tf/predictionTFService\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nexport default class PredictionsController {\n\n    tfsService;\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getAll(email) {\n        return this.dataService.getAll(email);\n    }\n\n    clearAll(email) {\n        return this.dataService.clearAll(email);\n    }\n\n    storeSingle(data) {\n        this.dataService.storeSingle(this.getPreparedPredData(data));\n    }\n\n    verifySingle(data, email) {\n        return this.dataService.verifySingle(data.id, email, StaticRatesStore.latestRates);\n    }\n\n    getPreparedPredData(data) {\n        return {\n            ...data,\n            volatility: this.getVolatilityByPair(data.volatility, data.pair)\n        }\n    }\n\n    getVolatilityByPair(value, pair) {\n        if (!!value) {\n            return value;\n        } else {\n            switch (pair) {\n                case 'USD/CHF':\n                case 'EUR/CHF':\n                    return 1;\n                case 'GBP/USD':\n                case 'USD/EUR':\n                case 'USD/JPY':\n                case 'USD/PLN':\n                case 'EUR/PLN':\n                    return 2;\n                case 'USD/RUB':\n                    return 4;\n                default:\n                    return 3;\n            }\n        }\n    }\n\n    async prepareTFService(params, email) {\n        const predictions = await this.dataService.getAllCompletedPredictions(email, params.pair);\n\n        if (!!predictions && predictions.length) {\n            const data4TF = predictions.map((pred) => ({\n                predRate: pred.predRate,\n                realRate: pred.realRate,\n                finalRate: pred.finalRate,\n                forecast: pred.forecast,\n                volatility: pred.volatility\n            }));\n\n            this.tfsService = undefined;\n            this.tfsService = new PredictionTFService(data4TF);\n\n            return await this.tfsService.trainModel(500, 32);\n        } else {\n            return 'empty'\n        }\n    }\n\n    getComputedPrediction(params) {\n        return this.tfsService.getResult([\n            this.getVolatilityByPair(params.volatility, params.pair),\n            params.forecast,\n            params.realRate,\n            params.predRate\n        ], 500);\n    }\n}\n","import {PredictionSchema} from \"../../db/schemes/prediction\";\nimport Realm from \"realm\";\nimport {AppLogger} from \"../../logger\";\nimport {v1 as uuidv1} from 'uuid';\nimport {dissoc} from \"ramda\";\n\nexport default class PredictionsDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    getAll(email) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\"`)\n                    .sorted('time', true);\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    clearAll(email) {\n        return Realm.open(this.config)\n            .then(realm => {\n                const preds = realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\"`);\n\n                realm.write(() => {\n                    realm.delete(preds);\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    storeSingle(data) {\n        Realm.open(this.config)\n            .then(realm => {\n\n                realm.write(() => {\n                    realm.create('Prediction', {\n                        ...data,\n                        finalRate: 0,\n                        verifyTime: 0,\n                        id: uuidv1()\n                    }, Realm.UpdateMode.Never);\n                });\n\n                realm.close();\n            }).catch((e) => AppLogger.error(e));\n    }\n\n    verifySingle(id, email, rates) {\n        return Realm.open(this.config)\n            .then(async realm => {\n                return await new Promise((resolve) => {\n                    const prediction = realm.objectForPrimaryKey('Prediction', id);\n                    const isUserValid = prediction.owner === email;\n\n                    if (!!prediction && isUserValid && !prediction.finalRate) {\n                        realm.write(() => {\n                            const pair = prediction.pair.replace('/', '');\n\n                            prediction.finalRate = parseFloat(rates[pair]);\n                            prediction.verifyTime = Date.now();\n\n                            resolve(dissoc('owner', prediction))\n                        });\n\n                        realm.close();\n                    } else {\n                        resolve(dissoc('owner', prediction))\n                    }\n                });\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    getAllCompletedPredictions(email, pair) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\" AND finalRate != ${0} AND pair = \"${pair}\"`);\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {clearAll, create, getAll, getPredRateByHistory, prepareTFS, verifySingle} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.del(clearAll());\n  router.post(create());\n  router.post(getPredRateByHistory());\n  router.post(prepareTFS());\n  router.post(verifySingle());\n  router.get(getAll());\n\n  return router.middleware()\n}\n","import {DATA_SOURCE_ENDPOINT, PAIRS} from \"./constants\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nconst axios = require('axios').default;\nconst scheduler = require('node-schedule');\n\nexport default class RatesSchedulerService {\n\n    static endpoint = DATA_SOURCE_ENDPOINT;\n\n    static instance = scheduler;\n\n    static job = null;\n\n    static status = 0;\n\n    static get requestPairs() {\n        return PAIRS.map(pair => pair.replace('/', '')).join();\n    }\n\n    static start(currency) {\n        this.job = this.instance.scheduleJob('*/5 * * * *', () => this.requestData(currency));\n        this.status = 1;\n    }\n\n    static stop() {\n        this.instance.cancelJob(this.job);\n        this.status = 0;\n    }\n\n    static dataFetched(currency, data) {}\n\n    static requestData(currency) {\n        if (StaticRatesStore.isRequiredTimePassed()) {\n            StaticRatesStore.updatePrevRequestTime();\n            console.log(new Date().toLocaleTimeString());\n\n            axios.get(`${this.endpoint}&currency=${this.requestPairs}`)\n                .then(response => this.dataFetched(currency, response.data))\n                .catch(console.error);\n        }\n    }\n\n    static requestDataImidiate(currency) {\n        console.log(new Date().toLocaleTimeString());\n\n        axios.get(`${this.endpoint}&currency=${this.requestPairs}`)\n            .then(response => this.dataFetched(currency, response.data))\n            .catch(console.error);\n    }\n}\n","\nexport const RateSchema = {\n    name: 'Rate',\n    primaryKey: 'id',\n    properties: {\n        id: 'int',\n\n        EURUSD: 'double',\n        EURPLN: 'double',\n        EURCHF: 'double',\n        EURGBP: 'double',\n\n        USDNOK: 'double',\n        GBPUSD: 'double',\n        USDRUB: 'double',\n        USDCHF: 'double',\n        USDPLN: 'double',\n        USDJPY: 'double',\n\n        time: 'string',\n    }\n};\n","'use strict';\n\nimport RatesSchedulerController from \"../controller\";\nimport RatesSchedulerDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new RatesSchedulerController(new RatesSchedulerDataService());\n\nexport const enable = () => {\n  router.post('/enable', authMiddleware, async (ctx, next) => {\n    try {\n      controller.enable();\n\n      ctx.body = { message: 'Done', status: await controller.getStatus() };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const checkStatus = () => {\n  router.get('/status', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.getStatus();\n\n      ctx.body = { message: 'Done', status: status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n","'use strict';\n\nimport RatesSchedulerService from \"./rates-scheduler.service\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nexport default class RatesSchedulerController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n        this.bindSchedulerService();\n        this.enable()\n    }\n\n    bindSchedulerService() {\n        RatesSchedulerService.dataFetched = this.dataFetched.bind(this);\n    }\n\n    enable() {\n        RatesSchedulerService.start('USD');\n        RatesSchedulerService.requestDataImidiate('USD')\n    }\n\n    getStatus() {\n        return RatesSchedulerService.status;\n    }\n\n    dataFetched(currency, data) {\n        if (this.isSaveAllowed(currency, data.price || {})) {\n            this.dataService.storeSingle(data.price || {});\n        }\n\n        this.updateStaticStore(data.price || {});\n    }\n\n    updateStaticStore(rates) {\n        StaticRatesStore.updateLocalLatest(rates);\n    }\n\n    isSaveAllowed(rates) {\n        return StaticRatesStore.isNewValue(rates);\n    }\n\n}\n","import Realm from \"realm\";\nimport {RateSchema} from \"../../db/schemes/rates\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class RatesSchedulerDataService {\n\n    config = {\n        schema: [RateSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/rates/01.realm',\n    };\n\n    getStorageRatesValues(rates) {\n        return Object.keys(rates).reduce((acc, curr) => {\n            if (!!rates[curr]) {\n                return  { ...acc, [curr]: parseFloat(rates[curr]) }\n            } else {\n                return acc;\n            }\n        }, {});\n    }\n\n    storeSingle(rates) {\n        Realm.open(this.config)\n            .then(realm => {\n                realm.write(() => {\n                    realm.create('Rate', {\n                        id: Date.now(),\n                        time: new Date().toISOString(),\n                        ...this.getStorageRatesValues(rates)\n                    }, Realm.UpdateMode.Never);\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {enable, checkStatus} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(enable());\n  router.get(checkStatus());\n\n  return router.middleware()\n}\n","\nconst scheduler = require('node-schedule');\n\nexport default class PredictionsSchedulerService {\n\n    static instance = scheduler;\n\n    static job = null;\n\n    static status = 0;\n\n    static start(currency) {\n        this.job = this.instance.scheduleJob('*/30 * * * * *', () =>\n            this.startPendingItemsReview(currency));\n        this.status = 1;\n    }\n\n    static stop() {\n        this.instance.cancelJob(this.job);\n        this.status = 0;\n    }\n\n    static startPendingItemsReview(currency) {}\n\n\n}\n","'use strict';\n\nimport PredictionsSchedulerController from \"../controller\";\nimport PredictionsSchedulerDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new PredictionsSchedulerController(new PredictionsSchedulerDataService());\n\nexport const enable = () => {\n  router.post('/enable', authMiddleware, async (ctx, next) => {\n    try {\n      controller.enable();\n\n      ctx.body = { message: 'Done', status: await controller.getStatus() };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const checkStatus = () => {\n  router.get('/status', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.getStatus();\n\n      ctx.body = { message: 'Done', status: status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n","'use strict';\n\nimport PredictionsSchedulerService from \"./predictions-scheduler.service\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nexport default class PredictionsSchedulerController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n        this.bindSchedulerService();\n        this.enable();\n    }\n\n    enable() {\n        PredictionsSchedulerService.start('USD');\n    }\n\n    getStatus() {\n        return PredictionsSchedulerService.status;\n    }\n\n    bindSchedulerService() {\n        PredictionsSchedulerService.startPendingItemsReview = this.fillPendingPredictions.bind(this);\n    }\n\n    fillPendingPredictions() {\n        if (StaticRatesStore.ratesHaveValue()) {\n            this.dataService.fillPendingPredictions(StaticRatesStore.latestRates);\n        }\n    }\n\n}\n","import Realm from \"realm\";\nimport {PredictionSchema} from \"../../db/schemes/prediction\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class PredictionsSchedulerDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    fillPendingPredictions(rates) {\n        return Realm.open(this.config)\n            .then(realm => {\n                const currentEpoch = Date.now();\n                const pendingItems = realm.objects('Prediction')\n                    .filtered(`finalRate = 0 AND time < ${currentEpoch}`) || [];\n\n\n                realm.write(() => {\n                    pendingItems.forEach((item) => {\n                        const pair = item.pair.replace('/', '');\n\n                        item.finalRate = parseFloat(rates[pair]);\n                        item.verifyTime = currentEpoch;\n                    });\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n\n\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {enable, checkStatus} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(enable());\n  router.get(checkStatus());\n\n  return router.middleware()\n}\n","'use strict';\n\nimport RatesController from \"../controller\";\nimport RatesDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport {AppLogger} from \"../../../logger\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new RatesController(new RatesDataService());\n\nexport const getHistory = () => {\n  router.get('/history', authMiddleware, async (ctx, next) => {\n    try {\n      const {limit} = ctx.request.query;\n      const rates = await controller.getHistory(limit);\n\n      ctx.body = { message: 'Done', rates };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\n","'use strict';\n\nexport default class RatesController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getHistory(number) {\n        return this.dataService.getHistory(number);\n    }\n\n}\n","import Realm from \"realm\";\nimport {RateSchema} from \"../../db/schemes/rates\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class RatesDataService {\n\n    config = {\n        schema: [RateSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/rates/01.realm',\n    };\n\n    getHistory(number) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Rate')\n                    .sorted('id', true)\n                    .slice(0, number);\n            }).catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {getHistory, getRates} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.get(getHistory());\n\n  return router.middleware()\n}\n","\nconst nodemailer = require('nodemailer');\n\n\nexport class Mailer {\n    static emailTransporter = nodemailer.createTransport({\n        host: 'smtp.gmail.com',\n        port: 465,\n        service: 'gmail',\n        secure: false,\n        auth: {\n            user: 'ratespalmail@gmail.com',\n            pass: 'rer9Ohdgmail'\n        },\n        debug: false,\n        logger: true\n    });\n\n    static sendPwReset(to, html) {\n        return this.emailTransporter.sendMail({\n            from: '\"Rates pal\" <noreply@ratespal.com>',\n            to,\n            subject: \"Reset password\",\n            text: \"\",\n            html,\n        });\n    }\n}\n","'use strict';\n\nimport UsersController from \"../controller\";\nimport UsersDataService from \"../data.service\";\nimport {getClientIp} from \"../../../utils/network\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport * as md5 from \"md5\";\nimport {Mailer} from \"../../../mailer/mailer\";\nimport {AppLogger} from \"../../../logger\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new UsersController(new UsersDataService());\n\nconst middleware = async (ctx, next) => {\n  ctx.type = 'json';\n  ctx.set('Access-Control-Expose-Headers', 'GoAway');\n\n  await next()\n};\n\nexport const register = () => {\n  router.post('/register', middleware, async (ctx, next) => {\n    try {\n      const resp = await controller.register(ctx.request.body);\n\n      ctx.status = resp.code;\n      ctx.body = { message: 'Done', resp };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const login = () => {\n  router.post('/login', middleware, async (ctx, next) => {\n\n    try {\n      const user = await controller.getUser(ctx.request.body);\n\n      if (!!user.data) {\n        controller.storeSession(user.data.hashedEmail, getClientIp(ctx.request));\n\n        ctx.session.user = `${user.data.hashedEmail}$${Date.now()}`;\n        ctx.body = { message: 'Done', data: {\n          email: user.data.email,\n          name: user.data.name\n        }};\n      } else {\n        ctx.body = { message: 'Not found', data: {} };\n      }\n\n      ctx.status = user.code;\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const logout = () => {\n  router.post('/logout', middleware, async (ctx, next) => {\n\n    try {\n      controller.destroySession(getUserEmailFromSession(ctx));\n\n      ctx.status = 200;\n      ctx.body = { message: 'Done' };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const restore = () => {\n  router.post('/restore', middleware, async (ctx, next) => {\n\n    try {\n      const params = await controller.initRestore(ctx.request.body.user);\n\n      ctx.status = params.code;\n      ctx.body = { message: 'Done' };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const createPw = () => {\n  router.post('/create-pw', middleware, async (ctx, next) => {\n\n    try {\n      const params = await controller.createPw(ctx.request.body.pw, ctx.request.body.v);\n\n      ctx.status = params.code;\n      ctx.body = { message: 'Done', data: params };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\n\n","'use strict';\n\nimport {Mailer} from \"../../mailer/mailer\";\nimport {getRestoreHTML} from \"../../utils/email\";\n\nexport default class UsersController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    register(data) {\n        return this.dataService.registerUser(data);\n    }\n\n    getUser(data) {\n        return this.dataService.getUser(data);\n    }\n\n    storeSession(email, ip) {\n        return this.dataService.storeSession(email, ip);\n    }\n\n    destroySession(email) {\n        return this.dataService.destroySession(email);\n    }\n\n    async initRestore(email) {\n        const params = await this.dataService.getRestoreToken(email);\n\n        if (params.data.token) {\n            Mailer.sendPwReset(email, getRestoreHTML(params.data.name, params.data.token))\n        }\n\n        return params;\n    }\n\n    createPw(pw, token) {\n        return this.dataService.createPw(pw, token);\n    }\n\n\n}\n","\n\nexport function getRestoreHTML(name, token) {\n    return `\n        Hi ${name}, <br>\n        Need to reset your password? Click on the link below to get you in.  <br>\n        <a href=\"http://localhost:4000/reset-password?v=${token}\">Create new password</a>\n    `;\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {createPw, login, logout, register, restore} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(register());\n  router.post(login());\n  router.post(logout());\n  router.post(restore());\n  router.post(createPw());\n\n  return router.middleware()\n}\n","export function getClientIp(req) {\n    return req.headers['referer'];\n}\n","'use strict';\n\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport AnalyzeController from \"../controller\";\nimport AnalyzeDataService from \"../data.service\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport {PredictionTFService} from \"../../../tf/predictionTFService\";\nimport {dissoc, map} from \"ramda\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new AnalyzeController(\n    new AnalyzeDataService(),\n    new PredictionTFService()\n);\n\nexport const getCompletedPredictions = () => {\n  router.post('/completed', authMiddleware, async (ctx, next) => {\n    try {\n      const data = await controller.getAllCompletedPredictions(\n          getUserEmailFromSession(ctx),\n          ctx.request.body\n      );\n\n      ctx.body = { message: 'Done', data: map(dissoc('owner'), data) };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\n","'use strict';\n\nexport default class AnalyzeController {\n\n    tfsService;\n    dataService;\n\n    constructor(_dataServiceInstance, _tfsInstance) {\n        this.dataService = _dataServiceInstance;\n        this.tfsService = _tfsInstance;\n    }\n\n    getAllCompletedPredictions(email, params) {\n        return this.dataService.getAllCompletedPredictions(email, params);\n    }\n\n\n\n\n}\n","import Realm from \"realm\";\nimport {PredictionSchema} from \"../../db/schemes/prediction\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class AnalyzeDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    getAllCompletedPredictions(email, params) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\" AND finalRate != ${0} AND time >= ${\n                        params.dateStart} AND verifyTime <= ${params.dateEnd}`)\n                    .sorted('time', true);\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {getCompletedPredictions} from \"./_routes\";\n\nconst router = new Router();\n\nexport default () => {\n  router.post(getCompletedPredictions());\n\n  return router.middleware()\n}\n","'use strict';\n\nimport RatesController from \"../controller\";\nimport RatesDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport {AppLogger} from \"../../../logger\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new RatesController(new RatesDataService());\n\nconst middleware = async (ctx, next) => {\n  ctx.type = 'json';\n  ctx.set('Access-Control-Expose-Headers', 'GoAway');\n\n  await next()\n};\n\nexport const getStats = () => {\n  router.get('/whatsgoingon', middleware, async (ctx, next) => {\n    try {\n      const data = await controller.getStats();\n\n      ctx.body = { message: 'Done', data };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\n","'use strict';\n\nexport default class StatsController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getStats() {\n        return Promise.all([\n            this.dataService.getUsersCount(),\n            this.dataService.getPredsCount(),\n            this.dataService.getHistoryCount()\n        ]);\n    }\n\n}\n","import Realm from \"realm\";\nimport {RateSchema} from \"../../db/schemes/rates\";\nimport {AppLogger} from \"../../logger\";\nimport {PredictionSchema} from \"../../db/schemes/prediction\";\nimport {UserSchema} from \"../../db/schemes/user\";\n\nexport default class StatsDataService {\n\n    ratesConfig = {\n        schema: [RateSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/rates/01.realm',\n    };\n\n    predsConfig = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    usersConfig = {\n        schema: [UserSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/users/01.realm',\n    };\n\n    getHistoryCount() {\n        return Realm.open(this.ratesConfig)\n            .then(realm => {\n                return realm.objects('Rate').length;\n            }).catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    getUsersCount() {\n        return Realm.open(this.usersConfig)\n            .then(realm => {\n                return realm.objects('User').length;\n            }).catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    getPredsCount() {\n        return Realm.open(this.predsConfig)\n            .then(realm => {\n                return realm.objects('Rate').length;\n            }).catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {getStats} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.get(getStats());\n\n  return router.middleware()\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport mount from 'koa-mount';\n\nimport predictions from 'predictions';\nimport ratesScheduler from 'rates-scheduler';\nimport predictionsScheduler from 'predictions-scheduler';\nimport rates from 'rates';\nimport users from 'users';\nimport analyze from 'analyze';\nimport stats from 'stats';\n\nexport const router = new Router();\n\nexport default () => {\n    router.use(mount('/predictions', predictions()));\n    router.use(mount('/rates-scheduler', ratesScheduler()));\n    router.use(mount('/predictions-scheduler', predictionsScheduler()));\n    router.use(mount('/rates', rates()));\n    router.use(mount('/users', users()));\n    router.use(mount('/analyze', analyze()));\n    router.use(mount('/stats', stats()));\n\n    return router.middleware()\n}\n","import serve from 'koa-static'\nimport bodyParser from 'koa-bodyparser'\nimport config from \"./config\";\nimport routes from \"./routes\";\nimport {AppLogger} from \"./logger/AppLogger\";\n\nconst cors = require('@koa/cors');\nconst mount = require('koa-mount');\nconst session = require('koa-session-auth');\n\nexport const sessionConfig = {\n    useToken: true, /** (boolean) use token-session or not (default true) */\n    useCookie: false, /** (boolean) use cookie-session or not (default true) */\n    key: 'GoAway', /** (string) cookie and token key (default is KoaToken) */\n    /** (number || 'session') maxAge in ms (default is 1 days) */\n    /** 'session' will result in a cookie that expires when session/browser is closed */\n    /** Warning: If a session cookie is stolen, this cookie will never expire */\n    maxAge: 86400000 * 7,\n    autoCommit: true, /** (boolean) automatically commit headers (default true) */\n    overwrite: true, /** (boolean) can overwrite or not (default true) */\n    httpOnly: true, /** (boolean) httpOnly or not (default true) */\n    signed: true, /** (boolean) signed or not (default true) */\n    rolling: false, /** (boolean) Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) */\n    renew: false, /** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*/\n    genid: (ctx) => AppLogger.warn(ctx)\n};\n\nexport default (app) => {\n    app.use(async (ctx, next) => {\n        try {\n            await next();\n\n            if (ctx.status === 404) {\n                ctx.throw(404)\n            }\n\n            if (ctx.status === 401) {\n                ctx.throw(401)\n            }\n\n            if (ctx.status === 200) {\n                ctx.body = {\n                    status: 200,\n                    data: ctx.body\n                }\n            }\n\n        } catch (err) {\n            AppLogger.error(err);\n\n            ctx.status = err.status || 500;\n            ctx.type = 'json';\n            ctx.body = {\n                status: ctx.status,\n                message: err.message\n            };\n\n            ctx.app.emit('error', err, ctx);\n\n        }\n    });\n\n    app.use(cors());\n    app.keys = ['11223344qqwweerr'];\n    app.use(bodyParser());\n    app.use(serve(config.static_dir.root));\n    app.use(session(sessionConfig, app));\n    app.use(mount('/api', routes()));\n\n    app.on('error', (err) => {\n        AppLogger.error(err.message);\n    });\n\n\n\n\n}\n\n\n","import config from \"./config\";\nimport middlewares from \"./middlewares\";\n\nconst Koa = require('koa');\nconst app = new Koa();\nconst host = process.env.HOST || '127.0.0.1';\nconst port = process.env.PORT || config.server.port;\n\nmiddlewares(app);\n\napp.listen(port, host);\n"],"sourceRoot":""}