{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"realm\"","webpack:///external \"koa-trie-router\"","webpack:///external \"koa-mount\"","webpack:///external \"bcrypt\"","webpack:///external \"ramda\"","webpack:///external \"md5\"","webpack:///external \"node-schedule\"","webpack:///external \"koa-static\"","webpack:///external \"koa-bodyparser\"","webpack:///external \"fs\"","webpack:///external \"@tensorflow/tfjs-node\"","webpack:///external \"axios\"","webpack:///external \"nodemailer\"","webpack:///external \"@koa/cors\"","webpack:///external \"koa-session-auth\"","webpack:///external \"koa\"","webpack:///./config/index.js","webpack:///./logger/AppLogger.js","webpack:///./tf/predictionTFService.js","webpack:///./db/schemes/prediction.js","webpack:///./db/schemes/user.js","webpack:///./db/helpers/responseWrapper.js","webpack:///./db/schemes/session.js","webpack:///./modules/users/data.service.js","webpack:///./utils/hash.js","webpack:///./utils/session.js","webpack:///./guards/authMiddlware.js","webpack:///./modules/users/sessionController.js","webpack:///./modules/predictions/_routes/index.js","webpack:///./modules/predictions/controller.js","webpack:///./modules/predictions/data.service.js","webpack:///./modules/predictions/index.js","webpack:///./static/rates.js","webpack:///./modules/rates-scheduler/rates-scheduler.service.js","webpack:///./modules/rates-scheduler/constants.js","webpack:///./db/schemes/rates.js","webpack:///./modules/rates-scheduler/_routes/index.js","webpack:///./modules/rates-scheduler/controller.js","webpack:///./modules/rates-scheduler/data.service.js","webpack:///./modules/rates-scheduler/index.js","webpack:///./modules/predictions-scheduler/predictions-scheduler.service.js","webpack:///./modules/predictions-scheduler/_routes/index.js","webpack:///./modules/predictions-scheduler/controller.js","webpack:///./modules/predictions-scheduler/data.service.js","webpack:///./modules/predictions-scheduler/index.js","webpack:///./modules/rates/_routes/index.js","webpack:///./modules/rates/controller.js","webpack:///./modules/rates/data.service.js","webpack:///./modules/rates/index.js","webpack:///./mailer/mailer.js","webpack:///./modules/users/_routes/index.js","webpack:///./modules/users/controller.js","webpack:///./utils/email.js","webpack:///./modules/users/index.js","webpack:///./utils/network.js","webpack:///./modules/analyze/_routes/index.js","webpack:///./modules/analyze/controller.js","webpack:///./modules/analyze/data.service.js","webpack:///./modules/analyze/index.js","webpack:///./routes.js","webpack:///./middlewares.js","webpack:///./main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","port","root","options","fs","AppLogger","error","this","logFile","write","stack","split","message","e","console","createWriteStream","flags","process","stdout","tf","PredictionTFService","constructor","data","sequential","configure","init","getPrediction","params","inputMax","inputMinVal","labelMinVal","labelMax","tidy","normalizedPredVals","tensor2d","length","sub","div","model","predict","reshape","mul","add","dataSync","getNormalizedValues","inputTnsr","max","min","labelTnsr","inputs","labels","items","_data","initTensors","util","shuffle","initInputTnsr","initLabelsTnsr","tensor","map","item","volatility","forecast","realRate","predRate","finalRate","layers","dense","units","inputShape","useBias","compile","loss","optimizer","destroy","dispose","trainModel","epochs","batchSize","Promise","resolve","reject","isRunning","fit","then","PredictionSchema","primaryKey","properties","id","pair","owner","time","verifyTime","UserSchema","email","type","indexed","pw","restoreToken","default","active","ResponseWrapper","isObject","_code","err","_error","code","a","SessionSchema","expired","info","UsersDataService","schema","deleteRealmIfMigrationNeeded","path","getUserUnsafe","Realm","open","userConfig","realm","objectForPrimaryKey","catch","getSession","sessionConfig","response","user","bcrypt","hashedEmail","md5","storeSession","ip","Date","now","maxAge","UpdateMode","Modified","close","destroySession","session","delete","emailToRestoreToken","token","status","registerUser","objects","filtered","isEmpty","Never","getUserEmailFromSession","ctx","controller","_dataServiceInstance","dataService","authMiddleware","async","next","isNew","storedSession","router","getAll","storeSingle","getPreparedPredData","getVolatilityByPair","predictions","getAllCompletedPredictions","data4TF","pred","tfsService","undefined","getComputedPrediction","getResult","config","sorted","Router","post","request","body","middleware","result","prepareTFService","dissoc","StaticRatesStore","base","rates","latestBase","latestRates","keys","prevSet","requiredMsGap","USDEUR","toString","USDNOK","USDGBP","USDRUB","USDCHF","USDPLN","axios","scheduler","RatesSchedulerService","currency","job","instance","scheduleJob","requestData","cancelJob","isRequiredTimePassed","updatePrevRequestTime","log","toLocaleTimeString","endpoint","dataFetched","RateSchema","USD","EUR","NOK","GBP","RUB","CHF","PLN","bindSchedulerService","enable","start","getStatus","isSaveAllowed","price","updateStaticStore","set","isNewValue","parseFloat","toISOString","PredictionsSchedulerService","startPendingItemsReview","fillPendingPredictions","ratesHaveValue","currentEpoch","pendingItems","forEach","replace","getPair","second","getHistory","number","slice","query","limit","nodemailer","Mailer","to","html","emailTransporter","sendMail","from","subject","text","createTransport","host","service","secure","auth","pass","debug","logger","register","getUser","getRestoreToken","sendPwReset","createPw","resp","headers","initRestore","v","_tfsInstance","dateStart","dateEnd","mount","useToken","useCookie","autoCommit","overwrite","httpOnly","signed","rolling","renew","genid","warn","app","env","HOST","PORT","use","throw","emit","bodyParser","serve","ratesScheduler","predictionsScheduler","users","analyze","on","listen"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","module.exports = require(\"realm\");","module.exports = require(\"koa-trie-router\");","module.exports = require(\"koa-mount\");","module.exports = require(\"bcrypt\");","module.exports = require(\"ramda\");","module.exports = require(\"md5\");","module.exports = require(\"node-schedule\");","module.exports = require(\"koa-static\");","module.exports = require(\"koa-bodyparser\");","module.exports = require(\"fs\");","module.exports = require(\"@tensorflow/tfjs-node\");","module.exports = require(\"axios\");","module.exports = require(\"nodemailer\");","module.exports = require(\"@koa/cors\");","module.exports = require(\"koa-session-auth\");","module.exports = require(\"koa\");","'use strict';\n\nexport default {\n  app: {\n    name: 'Koa',\n    version: '1.0.0'\n  },\n  server: {\n    port: 3333\n  },\n  static_dir: {\n    root: './static',\n    options: {}\n  },\n}\n","const fs = require('fs');\n\nexport class AppLogger {\n\n    static logFile = fs.createWriteStream('./logger/files/log', { flags: 'a' });\n    static logStdout = process.stdout;\n\n    static error(error) {\n        try {\n            this.logFile.write(`${error.stack.split(')')[0] || error.message} \\n`);\n        } catch (e) {\n            console.error(e.message);\n        }\n    }\n}\n","import {AppLogger} from \"../logger\";\n\nconst tf = require('@tensorflow/tfjs-node');\n\nexport class PredictionTFService {\n\n    isRunning = false;\n\n    model = tf.sequential();\n\n    inputTnsr = null;\n    labelTnsr = null;\n\n    _data = [];\n\n    constructor(data) {\n        this.configure();\n        this.init(data);\n    }\n\n    getPrediction(params, inputMax, inputMinVal, labelMinVal, labelMax) {\n        return tf.tidy(() => {\n            const normalizedPredTnsr = tf.tensor2d(params, [1, params.length]);\n            const normalizedPredVals = normalizedPredTnsr.sub(inputMinVal).div(inputMax.sub(inputMinVal));\n            const predResult = this.model.predict(normalizedPredVals.reshape([1, params.length]));\n            const readablePred = predResult.mul(labelMax.sub(labelMinVal)).add(labelMinVal);\n\n            return readablePred.dataSync();\n        });\n    }\n\n    getNormalizedValues() {\n        return tf.tidy(() => {\n            const inputMax = this.inputTnsr.max();\n            const inputMinVal = this.inputTnsr.min();\n            const labelMax = this.labelTnsr.max();\n            const labelMinVal = this.labelTnsr.min();\n\n            return {\n                inputs: this.inputTnsr.sub(inputMinVal).div(inputMax.sub(inputMinVal)),\n                labels: this.labelTnsr.sub(labelMinVal).div(labelMax.sub(labelMinVal)),\n                inputMax,\n                inputMinVal,\n                labelMax,\n                labelMinVal,\n            }\n        });\n    }\n\n    init(items) {\n        this._data = items || [];\n\n        this.initTensors();\n    }\n\n    initTensors() {\n        tf.util.shuffle(this._data);\n        this.initInputTnsr();\n        this.initLabelsTnsr();\n    }\n\n    initInputTnsr() {\n        this.inputTnsr = tf.tensor(this._data.map((item) => ([\n            item.volatility, item.forecast, item.realRate, item.predRate\n        ])));\n    }\n\n    initLabelsTnsr() {\n        this.labelTnsr = tf.tensor2d(\n            this._data.map((item) => item.finalRate\n        ), [this._data.length, 1]);\n    }\n\n    configure() {\n        this.model.add(tf.layers.dense({ units: 1, inputShape: [4] }));\n        this.model.add(tf.layers.dense({ units: 1, useBias: true }));\n        this.model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n    }\n\n    destroy() {\n        this.model.dispose()\n    }\n\n    async getResult(params) {\n        const { inputMax, inputMinVal, labelMinVal, labelMax } = this.getNormalizedValues();\n\n        return this.getPrediction(params, inputMax, inputMinVal, labelMinVal, labelMax);\n    }\n\n    trainModel(epochs, batchSize) {\n        const { inputs, labels } = this.getNormalizedValues();\n\n        return new Promise((resolve, reject) => {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.model.fit(inputs, labels, {\n                    batchSize,\n                    epochs\n                }).then(() => {\n                    this.isRunning = false;\n                    resolve('trainingDone');\n                });\n            }\n        });\n    }\n\n\n\n}\n","\nexport const PredictionSchema = {\n    name: 'Prediction',\n    primaryKey: 'id',\n    properties: {\n        id: 'int',\n        predRate: 'double',\n        realRate: 'double',\n        finalRate: 'double',\n        pair:  'string',\n        owner:  'string',\n        time: 'int',\n        verifyTime: 'int',\n        forecast: 'int',\n        volatility: 'int'\n    }\n};\n","\nexport const UserSchema = {\n    name: 'User',\n    primaryKey: 'email',\n    properties: {\n        id: 'int',\n        email: {type: 'string', indexed: true},\n        name: 'string',\n        pw: 'string',\n        restoreToken: {type: 'string', default: ''},\n        active: {type: 'bool', default: true}\n    }\n};\n","\nexport class ResponseWrapper {\n    _data = null;\n    _error = null;\n    _code = null;\n\n    set data(value) {\n        if (this.isObject(value)) {\n            this._data = { ...value };\n        }\n\n        this._code = 200;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    set error(err) {\n        this._error = err;\n        this._code = 503;\n    }\n\n    get code() {\n        return this._code;\n    }\n\n    set code(code) {\n        this._code = code;\n    }\n\n    isObject(a) {\n        return (!!a) && (a.constructor === Object);\n    };\n}\n","\nexport const SessionSchema = {\n    name: 'Session',\n    primaryKey: 'id',\n    properties: {\n        expired: 'int',\n        id: 'string',\n        info: 'string'\n    }\n};\n","import Realm from \"realm\";\nimport * as bcrypt from \"bcrypt\";\nimport {AppLogger} from \"../../logger\";\nimport {UserSchema} from \"../../db/schemes/user\";\nimport {ResponseWrapper} from \"../../db/helpers/responseWrapper\";\nimport {SessionSchema} from \"../../db/schemes/session\";\nimport {sessionConfig} from \"../../middlewares\";\nimport * as md5 from \"md5\";\nimport {emailToRestoreToken} from \"../../utils/hash\";\n\nexport default class UsersDataService {\n\n    userConfig = {\n        schema: [UserSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/users/01.realm',\n    };\n\n    sessionConfig = {\n        schema: [SessionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/sessions/01.realm',\n    };\n\n    getUserUnsafe(email) {\n        return Realm.open(this.userConfig)\n            .then(realm => realm.objectForPrimaryKey('User', email))\n            .catch((e) => AppLogger.error(e));\n    }\n\n    getSession(email) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => realm.objectForPrimaryKey('Session', email))\n            .catch((e) => AppLogger.error(e));\n    }\n\n    async getUser(data) {\n        const response = new ResponseWrapper();\n        const user = await this.getUserUnsafe(data.email);\n\n        if (!!user && bcrypt.compareSync(data.pw || '', user.pw || '')) {\n            response.data = {\n                hashedEmail: md5(user.email),\n                email: user.email,\n                name: user.name\n            };\n        } else {\n            response.error = 'Not found';\n            response.code = 404;\n        }\n\n        return response;\n    }\n\n    storeSession(email, ip) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => {\n                realm.write(() => {\n                    realm.create('Session', {\n                        expired: Date.now() + sessionConfig.maxAge,\n                        id: email,\n                        info: ip\n                    }, Realm.UpdateMode.Modified);\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    destroySession(email) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => {\n                const session = realm.objectForPrimaryKey('Session', email);\n\n                if (!!session) {\n                    realm.write(() => {\n                        realm.delete(session)\n                    });\n                }\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    async getRestoreToken(email) {\n        return new Promise(((resolve, reject) => {\n            Realm.open(this.userConfig)\n                .then(realm => {\n                    const response = new ResponseWrapper();\n                    const user = realm.objectForPrimaryKey('User', email);\n\n                    if (!!user && !user.restoreToken) {\n                        realm.write(() => {\n                            user.restoreToken = emailToRestoreToken(email);\n                            response.data = {\n                                token: user.restoreToken,\n                                name: user.name\n                            };\n\n                            resolve(response);\n                        });\n                    } else {\n                        response.data = {status: \"started\"};\n                        response.code = 208;\n                        resolve(response);\n                    }\n\n                    realm.close();\n                })\n                .catch((e) => {\n                    AppLogger.error(e);\n                    reject(e.message);\n                });\n        }));\n    }\n\n    registerUser(data) {\n        return Realm.open(this.userConfig)\n            .then(realm => {\n                const { email, pw, name } = data;\n                const response = new ResponseWrapper();\n                const userNotFound = realm.objects('User')\n                    .filtered(`email = \"${email}\"`).isEmpty();\n\n                if (userNotFound) {\n                    realm.write(() => {\n                        realm.create('User', {\n                            id: realm.objects('User').length + 1,\n                            pw: bcrypt.hashSync(pw, 10),\n                            name: name || email.split('@')[0],\n                            email: email\n                        }, Realm.UpdateMode.Never);\n\n                        response.data = { email };\n                    });\n                } else {\n                    response.error = 'User already exists';\n                    response.code = 200\n                }\n\n                realm.close();\n                return response;\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    async createPw(pw, token) {\n        return Realm.open(this.userConfig)\n            .then(realm => {\n                const response = new ResponseWrapper();\n                const user = realm.objects('User')\n                    .filtered(`restoreToken = \"${token}\" LIMIT(1)`);\n\n                if (user[0]) {\n                    realm.write(() => {\n                        user[0].pw = bcrypt.hashSync(pw, 10);\n                        user[0].restoreToken = \"\";\n\n                        response.data = { status: 'Done' };\n                    });\n                } else {\n                    response.error = 'Failed';\n                }\n\n                realm.close();\n                return response;\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","import * as bcrypt from \"bcrypt\";\n\nexport function emailToRestoreToken(email) {\n    return bcrypt.hashSync(email + \"_frvr3$R34gTgtr5_\", 5);\n}\n","\nexport function getUserEmailFromSession(ctx) {\n    return (ctx.session.user || '').split('$')[0];\n}\n","import UsersDataService from \"../modules/users/data.service\";\nimport SessionController from \"../modules/users/sessionController\";\nimport {getUserEmailFromSession} from \"../utils/session\";\nimport {getClientIp} from \"../utils/network\";\n\nconst controller = new SessionController(new UsersDataService());\n\nexport const authMiddleware = async (ctx, next) => {\n    if (ctx.session.isNew) {\n        ctx.data = null;\n        ctx.status = 401;\n    } else {\n        const storedSession = await controller.getSession(getUserEmailFromSession(ctx));\n\n        if (!storedSession || storedSession.expired <= Date.now()) {\n            ctx.data = null;\n            ctx.status = 401;\n        }\n    }\n\n    ctx.type = 'json';\n    await next()\n};\n","'use strict';\n\nexport default class SessionController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getSession(email) {\n        return this.dataService.getSession(email);\n    }\n\n\n}\n","'use strict';\n\nimport PredictionsController from \"../controller\";\nimport PredictionsDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport {dissoc, map} from \"ramda\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new PredictionsController(\n    new PredictionsDataService()\n);\n\nexport const create = () => {\n  router.post('/', authMiddleware, async (ctx, next) => {\n    try {\n      controller.storeSingle({\n        ...ctx.request.body,\n        owner: getUserEmailFromSession(ctx)\n      });\n\n      ctx.body = { message: 'Done!' };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const getAll = () => {\n  router.get('/', authMiddleware, async (ctx, next) => {\n    try {\n      const items = await controller.getAll(getUserEmailFromSession(ctx));\n\n      ctx.body = { message: 'Done fetch!', predictions: map(dissoc('owner'), items) };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const prepareTFS = () => {\n  router.post('/prepare-for-history', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.prepareTFService(\n          ctx.request.body,\n          getUserEmailFromSession(ctx)\n      );\n\n      ctx.body = { message: 'Done!', status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const getPredRateByHistory = () => {\n  router.post('/compute-current', authMiddleware, async (ctx, next) => {\n    try {\n      const result = await controller.getComputedPrediction(\n          ctx.request.body\n      );\n\n      ctx.body = { message: 'Done!', result };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n","'use strict';\n\n\n\nimport {PredictionTFService} from \"../../tf/predictionTFService\";\n\nexport default class PredictionsController {\n\n    tfsService;\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getAll(email) {\n        return this.dataService.getAll(email);\n    }\n\n    storeSingle(data) {\n        this.dataService.storeSingle(this.getPreparedPredData(data));\n    }\n\n    getPreparedPredData(data) {\n        return {\n            ...data,\n            volatility: this.getVolatilityByPair(data.volatility, data.pair)\n        }\n    }\n\n    getVolatilityByPair(value, pair) {\n        if (!!value) {\n            return value;\n        } else {\n            switch (pair) {\n                case 'USD/CHF':\n                    return 1;\n                case 'USD/GBP':\n                case 'USD/EUR':\n                    return 2;\n                case 'USD/RUB':\n                    return 4;\n                default:\n                    return 3;\n            }\n        }\n    }\n\n    async prepareTFService(params, email) {\n        const predictions = await this.dataService.getAllCompletedPredictions(email, params.pair);\n\n        if (!!predictions && predictions.length) {\n            const data4TF = predictions.map((pred) => ({\n                predRate: pred.predRate,\n                realRate: pred.realRate,\n                finalRate: pred.finalRate,\n                forecast: pred.forecast,\n                volatility: pred.volatility\n            }));\n\n            this.tfsService = undefined;\n            this.tfsService = new PredictionTFService(data4TF);\n\n            return await this.tfsService.trainModel(500, 32);\n        } else {\n            return 'empty'\n        }\n    }\n\n    getComputedPrediction(params) {\n        return this.tfsService.getResult([\n            this.getVolatilityByPair(params.volatility, params.pair),\n            params.forecast,\n            params.realRate,\n            params.predRate\n        ], 500);\n    }\n}\n","import {PredictionSchema} from \"../../db/schemes/prediction\";\nimport Realm from \"realm\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class PredictionsDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    getAll(email) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\"`)\n                    .sorted('time', true);\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    storeSingle(data) {\n        Realm.open(this.config)\n            .then(realm => {\n\n                realm.write(() => {\n                    realm.create('Prediction', {\n                        ...data,\n                        finalRate: 0,\n                        verifyTime: 0,\n                        id: Date.now()\n                    }, Realm.UpdateMode.Never);\n                });\n\n                realm.close();\n            }).catch((e) => AppLogger.error(e));\n    }\n\n    getAllCompletedPredictions(email, pair) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\" AND finalRate != ${0} AND pair = \"${pair}\"`);\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {create, getAll, getPredRateByHistory, prepareTFS} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(create());\n  router.post(getPredRateByHistory());\n  router.post(prepareTFS());\n  router.get(getAll());\n\n  return router.middleware()\n}\n","\nexport class StaticRatesStore {\n\n    static prevSet = Date.now();\n\n    static requiredMsGap = 45 * 60 * 1000;\n\n    static latestBase = null;\n\n    static latestRates = {\n        USDEUR: 0,\n        USDNOK: 0,\n        USDGBP: 0,\n        USDRUB: 0,\n        USDCHF: 0,\n        USDPLN: 0,\n    };\n\n    static set(base, rates) {\n        this.latestBase = base;\n        this.latestRates = rates;\n    }\n\n    static ratesHaveValue() {\n        return !!this.latestRates && !!Object.keys(this.latestRates).length;\n    }\n\n    static isRequiredTimePassed() {\n        return Date.now() - this.prevSet > this.requiredMsGap;\n    }\n\n    static updatePrevRequestTime() {\n        this.prevSet = Date.now();\n    }\n\n    static isNewValue(base, rates) {\n        return this.latestBase !== base ||\n            this.latestRates.USDEUR.toString() !== rates.USDEUR.toString() ||\n            this.latestRates.USDNOK.toString() !== rates.USDNOK.toString() ||\n            this.latestRates.USDGBP.toString() !== rates.USDGBP.toString() ||\n            this.latestRates.USDRUB.toString() !== rates.USDRUB.toString() ||\n            this.latestRates.USDCHF.toString() !== rates.USDCHF.toString() ||\n            this.latestRates.USDPLN.toString() !== rates.USDPLN.toString();\n    }\n\n}\n","import {DATA_SOURCE_ENDPOINT} from \"./constants\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nconst axios = require('axios').default;\nconst scheduler = require('node-schedule');\n\nexport default class RatesSchedulerService {\n\n    static endpoint = DATA_SOURCE_ENDPOINT;\n\n    static instance = scheduler;\n\n    static job = null;\n\n    static status = 0;\n\n    static start(currency) {\n        this.job = this.instance.scheduleJob('*/45 * * * *', () => this.requestData(currency));\n        this.status = 1;\n    }\n\n    static stop() {\n        this.instance.cancelJob(this.job);\n        this.status = 0;\n    }\n\n    static dataFetched(currency, data) {}\n\n    static requestData(currency) {\n        if (StaticRatesStore.isRequiredTimePassed()) {\n            StaticRatesStore.updatePrevRequestTime();\n            console.log(new Date().toLocaleTimeString());\n\n            axios.get(`${this.endpoint}&currency=USDEUR,USDPLN,USDNOK,USDGBP,USDCHF,USDRUB`)\n                .then(response => this.dataFetched(currency, response.data))\n                .catch(console.error);\n        }\n    }\n}\n","\nconst API_KEY = 'WtgXjLLRpYZqNwOOXId0';\n\nexport const DATA_SOURCE_ENDPOINT = 'https://fxmarketapi.com/apilive?api_key=' + API_KEY;\n","\nexport const RateSchema = {\n    name: 'Rate',\n    primaryKey: 'id',\n    properties: {\n        id: 'int',\n        base: {type: 'string', indexed: true},\n        USD: 'double',\n        EUR: 'double',\n        NOK: 'double',\n        GBP: 'double',\n        RUB: 'double',\n        CHF: 'double',\n        PLN: 'double',\n        time: 'string',\n    }\n};\n","'use strict';\n\nimport RatesSchedulerController from \"../controller\";\nimport RatesSchedulerDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new RatesSchedulerController(new RatesSchedulerDataService());\n\nexport const enable = () => {\n  router.post('/enable', authMiddleware, async (ctx, next) => {\n    try {\n      controller.enable();\n\n      ctx.body = { message: 'Done', status: await controller.getStatus() };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const checkStatus = () => {\n  router.get('/status', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.getStatus();\n\n      ctx.body = { message: 'Done', status: status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n","'use strict';\n\nimport RatesSchedulerService from \"./rates-scheduler.service\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nexport default class RatesSchedulerController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n        this.bindSchedulerService();\n        this.enable()\n    }\n\n    bindSchedulerService() {\n        RatesSchedulerService.dataFetched = this.dataFetched.bind(this);\n    }\n\n    enable() {\n        RatesSchedulerService.start('USD');\n        RatesSchedulerService.requestData('USD')\n    }\n\n    getStatus() {\n        return RatesSchedulerService.status;\n    }\n\n    dataFetched(currency, data) {\n        if (this.isSaveAllowed(currency, data.price || {})) {\n            this.dataService.storeSingle(currency, data.price || {});\n        }\n\n        this.updateStaticStore(currency, data.price || {});\n    }\n\n    updateStaticStore(currency, rates) {\n        StaticRatesStore.set(currency, rates);\n    }\n\n    isSaveAllowed(currency, rates) {\n        return StaticRatesStore.isNewValue(currency, rates);\n    }\n\n}\n","import Realm from \"realm\";\nimport {RateSchema} from \"../../db/schemes/rates\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class RatesSchedulerDataService {\n\n    validCurrencies = ['USD', 'EUR', 'NOK', 'GBP', 'RUB', 'CHF', 'PLN'];\n\n    config = {\n        schema: [RateSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/rates/01.realm',\n    };\n\n\n    storeSingle(currency, rates) {\n        Realm.open(this.config)\n            .then(realm => {\n                realm.write(() => {\n                    realm.create('Rate', {\n                        id: Date.now(),\n                        base: currency,\n                        USD: 1,\n                        EUR: parseFloat(rates.USDEUR),\n                        NOK: parseFloat(rates.USDNOK),\n                        GBP: parseFloat(rates.USDGBP),\n                        RUB: parseFloat(rates.USDRUB),\n                        CHF: parseFloat(rates.USDCHF),\n                        PLN: parseFloat(rates.USDPLN),\n                        time: new Date().toISOString()\n                    }, Realm.UpdateMode.Never);\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {enable, checkStatus} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(enable());\n  router.get(checkStatus());\n\n  return router.middleware()\n}\n","\nconst scheduler = require('node-schedule');\n\nexport default class PredictionsSchedulerService {\n\n    static instance = scheduler;\n\n    static job = null;\n\n    static status = 0;\n\n    static start(currency) {\n        this.job = this.instance.scheduleJob('*/30 * * * * *', () => this.startPendingItemsReview(currency));\n        this.status = 1;\n    }\n\n    static stop() {\n        this.instance.cancelJob(this.job);\n        this.status = 0;\n    }\n\n    static startPendingItemsReview(currency) {}\n\n\n}\n","'use strict';\n\nimport PredictionsSchedulerController from \"../controller\";\nimport PredictionsSchedulerDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new PredictionsSchedulerController(new PredictionsSchedulerDataService());\n\nexport const enable = () => {\n  router.post('/enable', authMiddleware, async (ctx, next) => {\n    try {\n      controller.enable();\n\n      ctx.body = { message: 'Done', status: await controller.getStatus() };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const checkStatus = () => {\n  router.get('/status', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.getStatus();\n\n      ctx.body = { message: 'Done', status: status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n","'use strict';\n\nimport PredictionsSchedulerService from \"./predictions-scheduler.service\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nexport default class PredictionsSchedulerController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n        this.bindSchedulerService();\n        this.enable();\n    }\n\n    enable() {\n        PredictionsSchedulerService.start('USD');\n    }\n\n    getStatus() {\n        return PredictionsSchedulerService.status;\n    }\n\n    bindSchedulerService() {\n        PredictionsSchedulerService.startPendingItemsReview = this.fillPendingPredictions.bind(this);\n    }\n\n    fillPendingPredictions() {\n        if (StaticRatesStore.ratesHaveValue()) {\n            this.dataService.fillPendingPredictions(StaticRatesStore.latestRates);\n        }\n    }\n\n}\n","import Realm from \"realm\";\nimport {PredictionSchema} from \"../../db/schemes/prediction\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class PredictionsSchedulerDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    fillPendingPredictions(rates) {\n        return Realm.open(this.config)\n            .then(realm => {\n                const currentEpoch = Date.now();\n                const pendingItems = realm.objects('Prediction')\n                    .filtered(`finalRate = 0 AND time < ${currentEpoch}`) || [];\n\n                realm.write(() => {\n                    pendingItems.forEach((item) => {\n                        const pair = item.pair.replace('/', '');\n\n                        item.finalRate = parseFloat(rates[pair]);\n                        item.verifyTime = currentEpoch;\n                    });\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n\n\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {enable, checkStatus} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(enable());\n  router.get(checkStatus());\n\n  return router.middleware()\n}\n","'use strict';\n\nimport RatesController from \"../controller\";\nimport RatesDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport {AppLogger} from \"../../../logger\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new RatesController(new RatesDataService());\n\nexport const getRates = () => {\n  router.get('/pair', authMiddleware, async (ctx, next) => {\n    try {\n      const {base, second} = ctx.request.query;\n      const rates = await controller.getPair(base, second);\n\n      ctx.body = { message: 'Done', rates };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const getHistory = () => {\n  router.get('/history', authMiddleware, async (ctx, next) => {\n    try {\n      const {base, limit} = ctx.request.query;\n      const rates = await controller.getHistory(base, limit);\n\n      ctx.body = { message: 'Done', rates };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\n","'use strict';\n\nexport default class RatesController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getPair(base, second) {\n        return this.dataService.getPair(base);\n    }\n\n    getHistory(base, number) {\n        return this.dataService.getHistory(base, number);\n    }\n\n}\n","import Realm from \"realm\";\nimport {RateSchema} from \"../../db/schemes/rates\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class RatesDataService {\n\n    validCurrencies = ['USD', 'EUR', 'NOK', 'GBP', 'RUB', 'CHF', 'PLN'];\n\n    config = {\n        schema: [RateSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/rates/01.realm',\n    };\n\n    getPair(base) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Rate')\n                    .filtered(`base = \"${base}\"`)\n                    .sorted('id', true)\n                    .slice(0, 1);\n            }).catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n    getHistory(base, number) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Rate')\n                    .filtered(`base = \"${base}\"`)\n                    .slice(0, number);\n            }).catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {getHistory, getRates} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.get(getRates());\n  router.get(getHistory());\n\n  return router.middleware()\n}\n","\nconst nodemailer = require('nodemailer');\n\n\nexport class Mailer {\n    static emailTransporter = nodemailer.createTransport({\n        host: 'smtp.gmail.com',\n        port: 465,\n        service: 'gmail',\n        secure: false,\n        auth: {\n            user: 'ratespalmail@gmail.com',\n            pass: 'rer9Ohdgmail'\n        },\n        debug: false,\n        logger: true\n    });\n\n    static sendPwReset(to, html) {\n        return this.emailTransporter.sendMail({\n            from: '\"Rates pal\" <noreply@ratespal.com>',\n            to,\n            subject: \"Reset password\",\n            text: \"\",\n            html,\n        });\n    }\n}\n","'use strict';\n\nimport UsersController from \"../controller\";\nimport UsersDataService from \"../data.service\";\nimport {getClientIp} from \"../../../utils/network\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport * as md5 from \"md5\";\nimport {Mailer} from \"../../../mailer/mailer\";\nimport {AppLogger} from \"../../../logger\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new UsersController(new UsersDataService());\n\nconst middleware = async (ctx, next) => {\n  ctx.type = 'json';\n  ctx.set('Access-Control-Expose-Headers', 'GoAway');\n\n  await next()\n};\n\nexport const register = () => {\n  router.post('/register', middleware, async (ctx, next) => {\n    try {\n      const resp = await controller.register(ctx.request.body);\n\n      ctx.status = resp.code;\n      ctx.body = { message: 'Done', resp };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const login = () => {\n  router.post('/login', middleware, async (ctx, next) => {\n\n    try {\n      const user = await controller.getUser(ctx.request.body);\n\n      if (!!user.data) {\n        controller.storeSession(user.data.hashedEmail, getClientIp(ctx.request));\n\n        ctx.session.user = `${user.data.hashedEmail}$${Date.now()}`;\n        ctx.body = { message: 'Done', data: {\n          email: user.data.email,\n          name: user.data.name\n        }};\n      } else {\n        ctx.body = { message: 'Not found', data: {} };\n      }\n\n      ctx.status = user.code;\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const logout = () => {\n  router.post('/logout', middleware, async (ctx, next) => {\n\n    try {\n      controller.destroySession(getUserEmailFromSession(ctx));\n\n      ctx.status = 200;\n      ctx.body = { message: 'Done' };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const restore = () => {\n  router.post('/restore', middleware, async (ctx, next) => {\n\n    try {\n      const params = await controller.initRestore(ctx.request.body.user);\n\n      ctx.status = params.code;\n      ctx.body = { message: 'Done' };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const createPw = () => {\n  router.post('/create-pw', middleware, async (ctx, next) => {\n\n    try {\n      const params = await controller.createPw(ctx.request.body.pw, ctx.request.body.v);\n\n      ctx.status = params.code;\n      ctx.body = { message: 'Done', data: params };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\n\n","'use strict';\n\nimport {Mailer} from \"../../mailer/mailer\";\nimport {getRestoreHTML} from \"../../utils/email\";\n\nexport default class UsersController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    register(data) {\n        return this.dataService.registerUser(data);\n    }\n\n    getUser(data) {\n        return this.dataService.getUser(data);\n    }\n\n    storeSession(email, ip) {\n        return this.dataService.storeSession(email, ip);\n    }\n\n    destroySession(email) {\n        return this.dataService.destroySession(email);\n    }\n\n    async initRestore(email) {\n        const params = await this.dataService.getRestoreToken(email);\n\n        if (params.data.token) {\n            Mailer.sendPwReset(email, getRestoreHTML(params.data.name, params.data.token))\n        }\n\n        return params;\n    }\n\n    createPw(pw, token) {\n        return this.dataService.createPw(pw, token);\n    }\n\n\n}\n","\n\nexport function getRestoreHTML(name, token) {\n    return `\n        Hi ${name}, <br>\n        Need to reset your password? Click on the link below to get you in.  <br>\n        <a href=\"http://localhost:4000/reset-password?v=${token}\">Create new password</a>\n    `;\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {createPw, login, logout, register, restore} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(register());\n  router.post(login());\n  router.post(logout());\n  router.post(restore());\n  router.post(createPw());\n\n  return router.middleware()\n}\n","export function getClientIp(req) {\n    return req.headers['referer'];\n}\n","'use strict';\n\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport AnalyzeController from \"../controller\";\nimport AnalyzeDataService from \"../data.service\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport {PredictionTFService} from \"../../../tf/predictionTFService\";\nimport {dissoc, map} from \"ramda\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new AnalyzeController(\n    new AnalyzeDataService(),\n    new PredictionTFService()\n);\n\nexport const getCompletedPredictions = () => {\n  router.post('/completed', authMiddleware, async (ctx, next) => {\n    try {\n      const data = await controller.getAllCompletedPredictions(\n          getUserEmailFromSession(ctx),\n          ctx.request.body\n      );\n\n      ctx.body = { message: 'Done', data: map(dissoc('owner'), data) };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\n","'use strict';\n\nexport default class AnalyzeController {\n\n    tfsService;\n    dataService;\n\n    constructor(_dataServiceInstance, _tfsInstance) {\n        this.dataService = _dataServiceInstance;\n        this.tfsService = _tfsInstance;\n    }\n\n    getAllCompletedPredictions(email, params) {\n        return this.dataService.getAllCompletedPredictions(email, params);\n    }\n\n\n\n\n}\n","import Realm from \"realm\";\nimport {PredictionSchema} from \"../../db/schemes/prediction\";\nimport {AppLogger} from \"../../logger\";\n\nexport default class AnalyzeDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    getAllCompletedPredictions(email, params) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\" AND finalRate != ${0} AND time >= ${params.dateStart} AND time <= ${params.dateEnd}`)\n                    .sorted('time', true);\n            })\n            .catch((e) => {\n                AppLogger.error(e)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {getCompletedPredictions} from \"./_routes\";\n\nconst router = new Router();\n\nexport default () => {\n  router.post(getCompletedPredictions());\n\n  return router.middleware()\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport mount from 'koa-mount';\n\nimport predictions from 'predictions';\nimport ratesScheduler from 'rates-scheduler';\nimport predictionsScheduler from 'predictions-scheduler';\nimport rates from 'rates';\nimport users from 'users';\nimport analyze from 'analyze';\n\nexport const router = new Router();\n\nexport default () => {\n    router.use(mount('/predictions', predictions()));\n    router.use(mount('/rates-scheduler', ratesScheduler()));\n    router.use(mount('/predictions-scheduler', predictionsScheduler()));\n    router.use(mount('/rates', rates()));\n    router.use(mount('/users', users()));\n    router.use(mount('/analyze', analyze()));\n\n    return router.middleware()\n}\n","import serve from 'koa-static'\nimport bodyParser from 'koa-bodyparser'\nimport config from \"./config\";\nimport routes from \"./routes\";\nimport {AppLogger} from \"./logger/AppLogger\";\n\nconst cors = require('@koa/cors');\nconst mount = require('koa-mount');\nconst session = require('koa-session-auth');\n\nexport const sessionConfig = {\n    useToken: true, /** (boolean) use token-session or not (default true) */\n    useCookie: false, /** (boolean) use cookie-session or not (default true) */\n    key: 'GoAway', /** (string) cookie and token key (default is KoaToken) */\n    /** (number || 'session') maxAge in ms (default is 1 days) */\n    /** 'session' will result in a cookie that expires when session/browser is closed */\n    /** Warning: If a session cookie is stolen, this cookie will never expire */\n    maxAge: 86400000,\n    autoCommit: true, /** (boolean) automatically commit headers (default true) */\n    overwrite: true, /** (boolean) can overwrite or not (default true) */\n    httpOnly: true, /** (boolean) httpOnly or not (default true) */\n    signed: true, /** (boolean) signed or not (default true) */\n    rolling: false, /** (boolean) Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) */\n    renew: false, /** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*/\n    genid: (ctx) => AppLogger.warn(ctx)\n};\n\nexport default (app) => {\n    app.use(async (ctx, next) => {\n        try {\n            await next();\n\n            if (ctx.status === 404) {\n                ctx.throw(404)\n            }\n\n            if (ctx.status === 401) {\n                ctx.throw(401)\n            }\n\n            if (ctx.status === 200) {\n                ctx.body = {\n                    status: 200,\n                    data: ctx.body\n                }\n            }\n\n        } catch (err) {\n            AppLogger.error(err);\n\n            ctx.status = err.status || 500;\n            ctx.type = 'json';\n            ctx.body = {\n                status: ctx.status,\n                message: err.message\n            };\n\n            ctx.app.emit('error', err, ctx);\n\n        }\n    });\n\n    switch (process.env.NODE_ENV) {\n        case 'development':\n            app.use(cors());\n            break;\n    }\n\n    app.keys = ['11223344qqwweerr'];\n    app.use(bodyParser());\n    app.use(serve(config.static_dir.root));\n    app.use(session(sessionConfig, app));\n    app.use(mount('/api', routes()));\n\n    app.on('error', (err) => {\n        AppLogger.error(err.message);\n    });\n\n\n\n\n}\n\n\n","import config from \"./config\";\nimport middlewares from \"./middlewares\";\n\nconst Koa = require('koa');\nconst app = new Koa();\nconst host = process.env.HOST || '127.0.0.1';\nconst port = process.env.PORT || config.server.port;\n\nmiddlewares(app);\n\napp.listen(port, host);\n"],"sourceRoot":""}