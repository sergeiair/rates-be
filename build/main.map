{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"realm\"","webpack:///external \"koa-trie-router\"","webpack:///external \"koa-mount\"","webpack:///external \"bcrypt\"","webpack:///external \"ramda\"","webpack:///external \"md5\"","webpack:///external \"node-schedule\"","webpack:///external \"koa-static\"","webpack:///external \"koa-bodyparser\"","webpack:///external \"bunyan\"","webpack:///external \"@tensorflow/tfjs-node\"","webpack:///external \"axios\"","webpack:///external \"nodemailer\"","webpack:///external \"@koa/cors\"","webpack:///external \"koa-session-auth\"","webpack:///external \"koa\"","webpack:///./config/index.js","webpack:///./logger/appLogger.js","webpack:///./tf/predictionTFService.js","webpack:///./db/schemes/prediction.js","webpack:///./db/schemes/user.js","webpack:///./db/helpers/responseWrapper.js","webpack:///./db/schemes/session.js","webpack:///./modules/users/data.service.js","webpack:///./utils/hash.js","webpack:///./utils/session.js","webpack:///./guards/authMiddlware.js","webpack:///./modules/users/sessionController.js","webpack:///./modules/predictions/_routes/index.js","webpack:///./modules/predictions/controller.js","webpack:///./modules/predictions/data.service.js","webpack:///./modules/predictions/index.js","webpack:///./static/rates.js","webpack:///./modules/rates-scheduler/rates-scheduler.service.js","webpack:///./modules/rates-scheduler/constants.js","webpack:///./db/schemes/rates.js","webpack:///./modules/rates-scheduler/_routes/index.js","webpack:///./modules/rates-scheduler/controller.js","webpack:///./modules/rates-scheduler/data.service.js","webpack:///./modules/rates-scheduler/index.js","webpack:///./modules/predictions-scheduler/predictions-scheduler.service.js","webpack:///./modules/predictions-scheduler/_routes/index.js","webpack:///./modules/predictions-scheduler/controller.js","webpack:///./modules/predictions-scheduler/data.service.js","webpack:///./modules/predictions-scheduler/index.js","webpack:///./modules/rates/_routes/index.js","webpack:///./modules/rates/controller.js","webpack:///./modules/rates/data.service.js","webpack:///./modules/rates/index.js","webpack:///./mailer/mailer.js","webpack:///./modules/users/_routes/index.js","webpack:///./modules/users/controller.js","webpack:///./utils/email.js","webpack:///./modules/users/index.js","webpack:///./utils/network.js","webpack:///./modules/analyze/_routes/index.js","webpack:///./modules/analyze/controller.js","webpack:///./modules/analyze/data.service.js","webpack:///./modules/analyze/index.js","webpack:///./routes.js","webpack:///./middlewares.js","webpack:///./main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","port","root","options","appLogger","createLogger","level","path","tf","PredictionTFService","constructor","data","sequential","this","configure","init","getPrediction","params","inputMax","inputMinVal","labelMinVal","labelMax","tidy","normalizedPredVals","tensor2d","length","sub","div","model","predict","reshape","mul","add","dataSync","getNormalizedValues","inputTnsr","max","min","labelTnsr","inputs","labels","items","_data","initTensors","util","shuffle","initInputTnsr","initLabelsTnsr","tensor","map","item","volatility","forecast","realRate","predRate","finalRate","layers","dense","units","inputShape","useBias","compile","loss","optimizer","destroy","dispose","trainModel","epochs","batchSize","Promise","resolve","reject","isRunning","fit","then","PredictionSchema","primaryKey","properties","id","pair","owner","time","verifyTime","UserSchema","email","type","indexed","pw","restoreToken","default","active","ResponseWrapper","isObject","_code","err","_error","code","a","SessionSchema","expired","info","UsersDataService","schema","deleteRealmIfMigrationNeeded","getUserUnsafe","Realm","open","userConfig","realm","objectForPrimaryKey","catch","e","error","message","getSession","sessionConfig","response","user","bcrypt","hashedEmail","md5","storeSession","ip","write","Date","now","maxAge","UpdateMode","Modified","close","destroySession","session","delete","emailToRestoreToken","token","status","registerUser","objects","filtered","isEmpty","split","Never","getUserEmailFromSession","ctx","controller","_dataServiceInstance","dataService","authMiddleware","async","next","isNew","storedSession","router","getAll","storeSingle","getPreparedPredData","getVolatilityByPair","predictions","getAllCompletedPredictions","data4TF","pred","tfsService","undefined","getComputedPrediction","getResult","config","sorted","Router","post","request","body","middleware","result","prepareTFService","dissoc","StaticRatesStore","base","rates","latestBase","latestRates","keys","prevSet","requiredMsGap","USDEUR","toString","USDNOK","USDGBP","USDRUB","USDCHF","USDPLN","axios","scheduler","RatesSchedulerService","currency","job","instance","scheduleJob","requestData","cancelJob","isRequiredTimePassed","updatePrevRequestTime","console","log","toLocaleTimeString","endpoint","dataFetched","RateSchema","USD","EUR","NOK","GBP","RUB","CHF","PLN","bindSchedulerService","enable","start","getStatus","isSaveAllowed","price","updateStaticStore","set","isNewValue","parseFloat","toISOString","PredictionsSchedulerService","startPendingItemsReview","fillPendingPredictions","ratesHaveValue","currentEpoch","pendingItems","forEach","_","curr2","getPair","second","getHistory","number","slice","query","limit","nodemailer","Mailer","to","html","emailTransporter","sendMail","from","subject","text","createTransport","host","service","secure","auth","pass","debug","logger","register","getUser","getRestoreToken","sendPwReset","createPw","resp","headers","initRestore","v","_tfsInstance","dateStart","dateEnd","mount","useToken","useCookie","autoCommit","overwrite","httpOnly","signed","rolling","renew","genid","warn","app","process","env","HOST","PORT","use","throw","emit","bodyParser","serve","ratesScheduler","predictionsScheduler","users","analyze","on","listen"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","module.exports = require(\"realm\");","module.exports = require(\"koa-trie-router\");","module.exports = require(\"koa-mount\");","module.exports = require(\"bcrypt\");","module.exports = require(\"ramda\");","module.exports = require(\"md5\");","module.exports = require(\"node-schedule\");","module.exports = require(\"koa-static\");","module.exports = require(\"koa-bodyparser\");","module.exports = require(\"bunyan\");","module.exports = require(\"@tensorflow/tfjs-node\");","module.exports = require(\"axios\");","module.exports = require(\"nodemailer\");","module.exports = require(\"@koa/cors\");","module.exports = require(\"koa-session-auth\");","module.exports = require(\"koa\");","'use strict';\n\nexport default {\n  app: {\n    name: 'Koa',\n    version: '1.0.0'\n  },\n  server: {\n    port: 3333\n  },\n  static_dir: {\n    root: './static',\n    options: {}\n  },\n}\n","const bunyan = require('bunyan');\n\nconst loggerInstance = bunyan.createLogger({name: 'app', level: 'debug', path: './log.json'});\n\nexport const appLogger = loggerInstance;\n","import {appLogger} from \"../logger\";\n\nconst tf = require('@tensorflow/tfjs-node');\n\nexport class PredictionTFService {\n\n    isRunning = false;\n\n    model = tf.sequential();\n\n    inputTnsr = null;\n    labelTnsr = null;\n\n    _data = [];\n\n    constructor(data) {\n        this.configure();\n        this.init(data);\n    }\n\n    getPrediction(params, inputMax, inputMinVal, labelMinVal, labelMax) {\n        return tf.tidy(() => {\n            const normalizedPredTnsr = tf.tensor2d(params, [1, params.length]);\n            const normalizedPredVals = normalizedPredTnsr.sub(inputMinVal).div(inputMax.sub(inputMinVal));\n            const predResult = this.model.predict(normalizedPredVals.reshape([1, params.length]));\n            const readablePred = predResult.mul(labelMax.sub(labelMinVal)).add(labelMinVal);\n\n            return readablePred.dataSync();\n        });\n    }\n\n    getNormalizedValues() {\n        return tf.tidy(() => {\n            const inputMax = this.inputTnsr.max();\n            const inputMinVal = this.inputTnsr.min();\n            const labelMax = this.labelTnsr.max();\n            const labelMinVal = this.labelTnsr.min();\n\n            return {\n                inputs: this.inputTnsr.sub(inputMinVal).div(inputMax.sub(inputMinVal)),\n                labels: this.labelTnsr.sub(labelMinVal).div(labelMax.sub(labelMinVal)),\n                inputMax,\n                inputMinVal,\n                labelMax,\n                labelMinVal,\n            }\n        });\n    }\n\n    init(items) {\n        this._data = items || [];\n\n        this.initTensors();\n    }\n\n    initTensors() {\n        tf.util.shuffle(this._data);\n        this.initInputTnsr();\n        this.initLabelsTnsr();\n    }\n\n    initInputTnsr() {\n        this.inputTnsr = tf.tensor(this._data.map((item) => ([\n            item.volatility, item.forecast, item.realRate, item.predRate\n        ])));\n    }\n\n    initLabelsTnsr() {\n        this.labelTnsr = tf.tensor2d(\n            this._data.map((item) => item.finalRate\n        ), [this._data.length, 1]);\n    }\n\n    configure() {\n        this.model.add(tf.layers.dense({ units: 1, inputShape: [4] }));\n        this.model.add(tf.layers.dense({ units: 1, useBias: true }));\n        this.model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n    }\n\n    destroy() {\n        this.model.dispose()\n    }\n\n    async getResult(params) {\n        const { inputMax, inputMinVal, labelMinVal, labelMax } = this.getNormalizedValues();\n\n        return this.getPrediction(params, inputMax, inputMinVal, labelMinVal, labelMax);\n    }\n\n    trainModel(epochs, batchSize) {\n        const { inputs, labels } = this.getNormalizedValues();\n\n        return new Promise((resolve, reject) => {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.model.fit(inputs, labels, {\n                    batchSize,\n                    epochs\n                }).then(() => {\n                    this.isRunning = false;\n                    resolve('trainingDone');\n                });\n            }\n        });\n    }\n\n\n\n}\n","\nexport const PredictionSchema = {\n    name: 'Prediction',\n    primaryKey: 'id',\n    properties: {\n        id: 'int',\n        predRate: 'double',\n        realRate: 'double',\n        finalRate: 'double',\n        pair:  'string',\n        owner:  'string',\n        time: 'int',\n        verifyTime: 'int',\n        forecast: 'int',\n        volatility: 'int'\n    }\n};\n","\nexport const UserSchema = {\n    name: 'User',\n    primaryKey: 'email',\n    properties: {\n        id: 'int',\n        email: {type: 'string', indexed: true},\n        name: 'string',\n        pw: 'string',\n        restoreToken: {type: 'string', default: ''},\n        active: {type: 'bool', default: true}\n    }\n};\n","\nexport class ResponseWrapper {\n    _data = null;\n    _error = null;\n    _code = null;\n\n    set data(value) {\n        if (this.isObject(value)) {\n            this._data = { ...value };\n        }\n\n        this._code = 200;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    set error(err) {\n        this._error = err;\n        this._code = 503;\n    }\n\n    get code() {\n        return this._code;\n    }\n\n    set code(code) {\n        this._code = code;\n    }\n\n    isObject(a) {\n        return (!!a) && (a.constructor === Object);\n    };\n}\n","\nexport const SessionSchema = {\n    name: 'Session',\n    primaryKey: 'id',\n    properties: {\n        expired: 'int',\n        id: 'string',\n        info: 'string'\n    }\n};\n","import Realm from \"realm\";\nimport * as bcrypt from \"bcrypt\";\nimport {appLogger} from \"../../logger\";\nimport {UserSchema} from \"../../db/schemes/user\";\nimport {ResponseWrapper} from \"../../db/helpers/responseWrapper\";\nimport {SessionSchema} from \"../../db/schemes/session\";\nimport {sessionConfig} from \"../../middlewares\";\nimport * as md5 from \"md5\";\nimport {emailToRestoreToken} from \"../../utils/hash\";\n\nexport default class UsersDataService {\n\n    userConfig = {\n        schema: [UserSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/users/01.realm',\n    };\n\n    sessionConfig = {\n        schema: [SessionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/sessions/01.realm',\n    };\n\n    getUserUnsafe(email) {\n        return Realm.open(this.userConfig)\n            .then(realm => realm.objectForPrimaryKey('User', email))\n            .catch((e) => appLogger.error(e.message));\n    }\n\n    getSession(email) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => realm.objectForPrimaryKey('Session', email))\n            .catch((e) => appLogger.error(e.message));\n    }\n\n    async getUser(data) {\n        const response = new ResponseWrapper();\n        const user = await this.getUserUnsafe(data.email);\n\n        if (!!user && bcrypt.compareSync(data.pw || '', user.pw || '')) {\n            response.data = {\n                hashedEmail: md5(user.email),\n                email: user.email,\n                name: user.name\n            };\n        } else {\n            response.error = 'Not found';\n            response.code = 404;\n        }\n\n        return response;\n    }\n\n    storeSession(email, ip) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => {\n                realm.write(() => {\n                    realm.create('Session', {\n                        expired: Date.now() + sessionConfig.maxAge,\n                        id: email,\n                        info: ip\n                    }, Realm.UpdateMode.Modified);\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n    destroySession(email) {\n        return Realm.open(this.sessionConfig)\n            .then(realm => {\n                const session = realm.objectForPrimaryKey('Session', email);\n\n                if (!!session) {\n                    realm.write(() => {\n                        realm.delete(session)\n                    });\n                }\n\n                realm.close();\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n    async getRestoreToken(email) {\n        return new Promise(((resolve, reject) => {\n            Realm.open(this.userConfig)\n                .then(realm => {\n                    const response = new ResponseWrapper();\n                    const user = realm.objectForPrimaryKey('User', email);\n\n                    if (!!user && !user.restoreToken) {\n                        realm.write(() => {\n                            user.restoreToken = emailToRestoreToken(email);\n                            response.data = {\n                                token: user.restoreToken,\n                                name: user.name\n                            };\n\n                            resolve(response);\n                        });\n                    } else {\n                        response.data = {status: \"started\"};\n                        response.code = 208;\n                        resolve(response);\n                    }\n\n                    realm.close();\n                })\n                .catch((e) => {\n                    appLogger.error(e.message);\n                    reject(e.message);\n                });\n        }));\n    }\n\n    registerUser(data) {\n        return Realm.open(this.userConfig)\n            .then(realm => {\n                const { email, pw, name } = data;\n                const response = new ResponseWrapper();\n                const userNotFound = realm.objects('User')\n                    .filtered(`email = \"${email}\"`).isEmpty();\n\n                if (userNotFound) {\n                    realm.write(() => {\n                        realm.create('User', {\n                            id: realm.objects('User').length + 1,\n                            pw: bcrypt.hashSync(pw, 10),\n                            name: name || email.split('@')[0],\n                            email: email\n                        }, Realm.UpdateMode.Never);\n\n                        response.data = { email };\n                    });\n                } else {\n                    response.error = 'User already exists';\n                    response.code = 200\n                }\n\n                realm.close();\n                return response;\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n    async createPw(pw, token) {\n        return Realm.open(this.userConfig)\n            .then(realm => {\n                const response = new ResponseWrapper();\n                const user = realm.objects('User')\n                    .filtered(`restoreToken = \"${token}\" LIMIT(1)`);\n\n                if (user[0]) {\n                    realm.write(() => {\n                        user[0].pw = bcrypt.hashSync(pw, 10);\n                        user[0].restoreToken = \"\";\n\n                        response.data = { status: 'Done' };\n                    });\n                } else {\n                    response.error = 'Failed';\n                }\n\n                realm.close();\n                return response;\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n}\n","import * as bcrypt from \"bcrypt\";\n\nexport function emailToRestoreToken(email) {\n    return bcrypt.hashSync(email + \"_frvr3$R34gTgtr5_\", 5);\n}\n","\nexport function getUserEmailFromSession(ctx) {\n    return (ctx.session.user || '').split('$')[0];\n}\n","import UsersDataService from \"../modules/users/data.service\";\nimport SessionController from \"../modules/users/sessionController\";\nimport {getUserEmailFromSession} from \"../utils/session\";\nimport {getClientIp} from \"../utils/network\";\n\nconst controller = new SessionController(new UsersDataService());\n\nexport const authMiddleware = async (ctx, next) => {\n    if (ctx.session.isNew) {\n        ctx.data = null;\n        ctx.status = 401;\n    } else {\n        const storedSession = await controller.getSession(getUserEmailFromSession(ctx));\n\n        if (!storedSession || storedSession.expired <= Date.now()) {\n            ctx.data = null;\n            ctx.status = 401;\n        }\n    }\n\n    ctx.type = 'json';\n    await next()\n};\n","'use strict';\n\nexport default class SessionController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getSession(email) {\n        return this.dataService.getSession(email);\n    }\n\n\n}\n","'use strict';\n\nimport PredictionsController from \"../controller\";\nimport PredictionsDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport {dissoc, map} from \"ramda\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new PredictionsController(\n    new PredictionsDataService()\n);\n\nexport const create = () => {\n  router.post('/', authMiddleware, async (ctx, next) => {\n    try {\n      controller.storeSingle({\n        ...ctx.request.body,\n        owner: getUserEmailFromSession(ctx)\n      });\n\n      ctx.body = { message: 'Done!' };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const getAll = () => {\n  router.get('/', authMiddleware, async (ctx, next) => {\n    try {\n      const items = await controller.getAll(getUserEmailFromSession(ctx));\n\n      ctx.body = { message: 'Done fetch!', predictions: map(dissoc('owner'), items) };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const prepareTFS = () => {\n  router.post('/prepare-for-history', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.prepareTFService(\n          ctx.request.body,\n          getUserEmailFromSession(ctx)\n      );\n\n      ctx.body = { message: 'Done!', status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const getPredRateByHistory = () => {\n  router.post('/compute-current', authMiddleware, async (ctx, next) => {\n    try {\n      const result = await controller.getComputedPrediction(\n          ctx.request.body\n      );\n\n      ctx.body = { message: 'Done!', result };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n","'use strict';\n\n\n\nimport {PredictionTFService} from \"../../tf/predictionTFService\";\n\nexport default class PredictionsController {\n\n    tfsService;\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getAll(email) {\n        return this.dataService.getAll(email);\n    }\n\n    storeSingle(data) {\n        this.dataService.storeSingle(this.getPreparedPredData(data));\n    }\n\n    getPreparedPredData(data) {\n        return {\n            ...data,\n            volatility: this.getVolatilityByPair(data.volatility, data.pair)\n        }\n    }\n\n    getVolatilityByPair(value, pair) {\n        if (!!value) {\n            return value;\n        } else {\n            switch (pair) {\n                case 'USD/CHF':\n                    return 1;\n                case 'USD/GBP':\n                case 'USD/EUR':\n                    return 2;\n                case 'USD/RUB':\n                    return 4;\n                default:\n                    return 3;\n            }\n        }\n    }\n\n    async prepareTFService(params, email) {\n        const predictions = await this.dataService.getAllCompletedPredictions(email, params.pair);\n\n        if (!!predictions && predictions.length) {\n            const data4TF = predictions.map((pred) => ({\n                predRate: pred.predRate,\n                realRate: pred.realRate,\n                finalRate: pred.finalRate,\n                forecast: pred.forecast,\n                volatility: pred.volatility\n            }));\n\n            this.tfsService = undefined;\n            this.tfsService = new PredictionTFService(data4TF);\n\n            return await this.tfsService.trainModel(500, 32);\n        } else {\n            return 'empty'\n        }\n    }\n\n    getComputedPrediction(params) {\n        return this.tfsService.getResult([\n            this.getVolatilityByPair(params.volatility, params.pair),\n            params.forecast,\n            params.realRate,\n            params.predRate\n        ], 500);\n    }\n}\n","import {PredictionSchema} from \"../../db/schemes/prediction\";\nimport Realm from \"realm\";\nimport {appLogger} from \"../../logger\";\n\nexport default class PredictionsDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    getAll(email) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\"`)\n                    .sorted('time', true);\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n    storeSingle(data) {\n        Realm.open(this.config)\n            .then(realm => {\n\n                realm.write(() => {\n                    realm.create('Prediction', {\n                        ...data,\n                        finalRate: 0,\n                        verifyTime: 0,\n                        id: Date.now()\n                    }, Realm.UpdateMode.Never);\n                });\n\n                realm.close();\n            }).catch((e) => appLogger.error(e.message));\n    }\n\n    getAllCompletedPredictions(email, pair) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\" AND finalRate != ${0} AND pair = \"${pair}\"`);\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {create, getAll, getPredRateByHistory, prepareTFS} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(create());\n  router.post(getPredRateByHistory());\n  router.post(prepareTFS());\n  router.get(getAll());\n\n  return router.middleware()\n}\n","\nexport class StaticRatesStore {\n\n    static prevSet = Date.now();\n\n    static requiredMsGap = 45 * 60 * 1000;\n\n    static latestBase = null;\n\n    static latestRates = {\n        USDEUR: 0,\n        USDNOK: 0,\n        USDGBP: 0,\n        USDRUB: 0,\n        USDCHF: 0,\n        USDPLN: 0,\n    };\n\n    static set(base, rates) {\n        this.latestBase = base;\n        this.latestRates = rates;\n    }\n\n    static ratesHaveValue() {\n        return !!this.latestRates && !!Object.keys(this.latestRates).length;\n    }\n\n    static isRequiredTimePassed() {\n        return Date.now() - this.prevSet > this.requiredMsGap;\n    }\n\n    static updatePrevRequestTime() {\n        this.prevSet = Date.now();\n    }\n\n    static isNewValue(base, rates) {\n        return this.latestBase !== base ||\n            this.latestRates.USDEUR.toString() !== rates.USDEUR.toString() ||\n            this.latestRates.USDNOK.toString() !== rates.USDNOK.toString() ||\n            this.latestRates.USDGBP.toString() !== rates.USDGBP.toString() ||\n            this.latestRates.USDRUB.toString() !== rates.USDRUB.toString() ||\n            this.latestRates.USDCHF.toString() !== rates.USDCHF.toString() ||\n            this.latestRates.USDPLN.toString() !== rates.USDPLN.toString();\n    }\n\n}\n","import {DATA_SOURCE_ENDPOINT} from \"./constants\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nconst axios = require('axios').default;\nconst scheduler = require('node-schedule');\n\nexport default class RatesSchedulerService {\n\n    static endpoint = DATA_SOURCE_ENDPOINT;\n\n    static instance = scheduler;\n\n    static job = null;\n\n    static status = 0;\n\n    static start(currency) {\n        this.job = this.instance.scheduleJob('*/45 * * * *', () => this.requestData(currency));\n        this.status = 1;\n    }\n\n    static stop() {\n        this.instance.cancelJob(this.job);\n        this.status = 0;\n    }\n\n    static dataFetched(currency, data) {}\n\n    static requestData(currency) {\n        if (StaticRatesStore.isRequiredTimePassed()) {\n            StaticRatesStore.updatePrevRequestTime();\n            console.log(new Date().toLocaleTimeString());\n\n            axios.get(`${this.endpoint}&currency=USDEUR,USDPLN,USDNOK,USDGBP,USDCHF,USDRUB`)\n                .then(response => this.dataFetched(currency, response.data))\n                .catch(console.error);\n        }\n    }\n}\n","\nconst API_KEY = 'WtgXjLLRpYZqNwOOXId0';\n\nexport const DATA_SOURCE_ENDPOINT = 'https://fxmarketapi.com/apilive?api_key=' + API_KEY;\n","\nexport const RateSchema = {\n    name: 'Rate',\n    primaryKey: 'id',\n    properties: {\n        id: 'int',\n        base: {type: 'string', indexed: true},\n        USD: 'double',\n        EUR: 'double',\n        NOK: 'double',\n        GBP: 'double',\n        RUB: 'double',\n        CHF: 'double',\n        PLN: 'double',\n        time: 'string',\n    }\n};\n","'use strict';\n\nimport RatesSchedulerController from \"../controller\";\nimport RatesSchedulerDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new RatesSchedulerController(new RatesSchedulerDataService());\n\nexport const enable = () => {\n  router.post('/enable', authMiddleware, async (ctx, next) => {\n    try {\n      controller.enable();\n\n      ctx.body = { message: 'Done', status: await controller.getStatus() };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const checkStatus = () => {\n  router.get('/status', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.getStatus();\n\n      ctx.body = { message: 'Done', status: status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n","'use strict';\n\nimport RatesSchedulerService from \"./rates-scheduler.service\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nexport default class RatesSchedulerController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n        this.bindSchedulerService();\n        this.enable()\n    }\n\n    bindSchedulerService() {\n        RatesSchedulerService.dataFetched = this.dataFetched.bind(this);\n    }\n\n    enable() {\n        RatesSchedulerService.start('USD');\n        RatesSchedulerService.requestData('USD')\n    }\n\n    getStatus() {\n        return RatesSchedulerService.status;\n    }\n\n    dataFetched(currency, data) {\n        if (this.isSaveAllowed(currency, data.price || {})) {\n            this.dataService.storeSingle(currency, data.price || {});\n        }\n\n        this.updateStaticStore(currency, data.price || {});\n    }\n\n    updateStaticStore(currency, rates) {\n        StaticRatesStore.set(currency, rates);\n    }\n\n    isSaveAllowed(currency, rates) {\n        return StaticRatesStore.isNewValue(currency, rates);\n    }\n\n}\n","import Realm from \"realm\";\nimport {RateSchema} from \"../../db/schemes/rates\";\nimport {appLogger} from \"../../logger\";\n\nexport default class RatesSchedulerDataService {\n\n    validCurrencies = ['USD', 'EUR', 'NOK', 'GBP', 'RUB', 'CHF', 'PLN'];\n\n    config = {\n        schema: [RateSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/rates/01.realm',\n    };\n\n\n    storeSingle(currency, rates) {\n        Realm.open(this.config)\n            .then(realm => {\n                realm.write(() => {\n                    realm.create('Rate', {\n                        id: Date.now(),\n                        base: currency,\n                        USD: 1,\n                        EUR: parseFloat(rates.USDEUR),\n                        NOK: parseFloat(rates.USDNOK),\n                        GBP: parseFloat(rates.USDGBP),\n                        RUB: parseFloat(rates.USDRUB),\n                        CHF: parseFloat(rates.USDCHF),\n                        PLN: parseFloat(rates.USDPLN),\n                        time: new Date().toISOString()\n                    }, Realm.UpdateMode.Never);\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {enable, checkStatus} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(enable());\n  router.get(checkStatus());\n\n  return router.middleware()\n}\n","\nconst scheduler = require('node-schedule');\n\nexport default class PredictionsSchedulerService {\n\n    static instance = scheduler;\n\n    static job = null;\n\n    static status = 0;\n\n    static start(currency) {\n        this.job = this.instance.scheduleJob('*/30 * * * * *', () => this.startPendingItemsReview(currency));\n        this.status = 1;\n    }\n\n    static stop() {\n        this.instance.cancelJob(this.job);\n        this.status = 0;\n    }\n\n    static startPendingItemsReview(currency) {}\n\n\n}\n","'use strict';\n\nimport PredictionsSchedulerController from \"../controller\";\nimport PredictionsSchedulerDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new PredictionsSchedulerController(new PredictionsSchedulerDataService());\n\nexport const enable = () => {\n  router.post('/enable', authMiddleware, async (ctx, next) => {\n    try {\n      controller.enable();\n\n      ctx.body = { message: 'Done', status: await controller.getStatus() };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const checkStatus = () => {\n  router.get('/status', authMiddleware, async (ctx, next) => {\n    try {\n      const status = await controller.getStatus();\n\n      ctx.body = { message: 'Done', status: status };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n","'use strict';\n\nimport PredictionsSchedulerService from \"./predictions-scheduler.service\";\nimport {StaticRatesStore} from \"../../static/rates\";\n\nexport default class PredictionsSchedulerController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n        this.bindSchedulerService();\n        this.enable();\n    }\n\n    enable() {\n        PredictionsSchedulerService.start('USD');\n    }\n\n    getStatus() {\n        return PredictionsSchedulerService.status;\n    }\n\n    bindSchedulerService() {\n        PredictionsSchedulerService.startPendingItemsReview = this.fillPendingPredictions.bind(this);\n    }\n\n    fillPendingPredictions() {\n        if (StaticRatesStore.ratesHaveValue()) {\n            this.dataService.fillPendingPredictions(StaticRatesStore.latestRates);\n        }\n    }\n\n}\n","import Realm from \"realm\";\nimport {PredictionSchema} from \"../../db/schemes/prediction\";\nimport {appLogger} from \"../../logger\";\n\nexport default class PredictionsSchedulerDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    fillPendingPredictions(rates) {\n        return Realm.open(this.config)\n            .then(realm => {\n                const currentEpoch = Date.now();\n                const pendingItems = realm.objects('Prediction')\n                    .filtered(`finalRate = 0 AND time < ${currentEpoch}`) || [];\n\n                realm.write(() => {\n                    pendingItems.forEach((item) => {\n                        const [_, curr2] = item.pair.split('/');\n\n                        item.finalRate = parseFloat(rates[curr2]);\n                        item.verifyTime = currentEpoch;\n                    });\n                });\n\n                realm.close();\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n\n\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {enable, checkStatus} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(enable());\n  router.get(checkStatus());\n\n  return router.middleware()\n}\n","'use strict';\n\nimport RatesController from \"../controller\";\nimport RatesDataService from \"../data.service\";\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport {appLogger} from \"../../../logger\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new RatesController(new RatesDataService());\n\nexport const getRates = () => {\n  router.get('/pair', authMiddleware, async (ctx, next) => {\n    try {\n      const {base, second} = ctx.request.query;\n      const rates = await controller.getPair(base, second);\n\n      ctx.body = { message: 'Done', rates };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const getHistory = () => {\n  router.get('/history', authMiddleware, async (ctx, next) => {\n    try {\n      const {base, limit} = ctx.request.query;\n      const rates = await controller.getHistory(base, limit);\n\n      ctx.body = { message: 'Done', rates };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\n","'use strict';\n\nexport default class RatesController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    getPair(base, second) {\n        return this.dataService.getPair(base);\n    }\n\n    getHistory(base, number) {\n        return this.dataService.getHistory(base, number);\n    }\n\n}\n","import Realm from \"realm\";\nimport {RateSchema} from \"../../db/schemes/rates\";\nimport {appLogger} from \"../../logger\";\n\nexport default class RatesDataService {\n\n    validCurrencies = ['USD', 'EUR', 'NOK', 'GBP', 'RUB', 'CHF', 'PLN'];\n\n    config = {\n        schema: [RateSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/rates/01.realm',\n    };\n\n    getPair(base) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Rate')\n                    .filtered(`base = \"${base}\"`)\n                    .sorted('id', true)\n                    .slice(0, 1);\n            }).catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n    getHistory(base, number) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Rate')\n                    .filtered(`base = \"${base}\"`)\n                    .slice(0, number);\n            }).catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {getHistory, getRates} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.get(getRates());\n  router.get(getHistory());\n\n  return router.middleware()\n}\n","\nconst nodemailer = require('nodemailer');\n\n\nexport class Mailer {\n    static emailTransporter = nodemailer.createTransport({\n        host: 'smtp.gmail.com',\n        port: 465,\n        service: 'gmail',\n        secure: false,\n        auth: {\n            user: 'ratespalmail@gmail.com',\n            pass: 'rer9Ohdgmail'\n        },\n        debug: false,\n        logger: true\n    });\n\n    static sendPwReset(to, html) {\n        return this.emailTransporter.sendMail({\n            from: '\"Rates pal\" <noreply@ratespal.com>',\n            to,\n            subject: \"Reset password\",\n            text: \"\",\n            html,\n        });\n    }\n}\n","'use strict';\n\nimport UsersController from \"../controller\";\nimport UsersDataService from \"../data.service\";\nimport {getClientIp} from \"../../../utils/network\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport * as md5 from \"md5\";\nimport {Mailer} from \"../../../mailer/mailer\";\nimport {appLogger} from \"../../../logger\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new UsersController(new UsersDataService());\n\nconst middleware = async (ctx, next) => {\n  ctx.type = 'json';\n  ctx.set('Access-Control-Expose-Headers', 'GoAway');\n\n  await next()\n};\n\nexport const register = () => {\n  router.post('/register', middleware, async (ctx, next) => {\n    try {\n      const resp = await controller.register(ctx.request.body);\n\n      ctx.status = resp.code;\n      ctx.body = { message: 'Done', resp };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const login = () => {\n  router.post('/login', middleware, async (ctx, next) => {\n\n    try {\n      const user = await controller.getUser(ctx.request.body);\n\n      if (!!user.data) {\n        controller.storeSession(user.data.hashedEmail, getClientIp(ctx.request));\n\n        ctx.session.user = `${user.data.hashedEmail}$${Date.now()}`;\n        ctx.body = { message: 'Done', data: {\n          email: user.data.email,\n          name: user.data.name\n        }};\n      } else {\n        ctx.body = { message: 'Not found', data: {} };\n      }\n\n      ctx.status = user.code;\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\nexport const logout = () => {\n  router.post('/logout', middleware, async (ctx, next) => {\n\n    try {\n      controller.destroySession(getUserEmailFromSession(ctx));\n\n      ctx.status = 200;\n      ctx.body = { message: 'Done' };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const restore = () => {\n  router.post('/restore', middleware, async (ctx, next) => {\n\n    try {\n      const params = await controller.initRestore(ctx.request.body.user);\n\n      ctx.status = params.code;\n      ctx.body = { message: 'Done' };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\nexport const createPw = () => {\n  router.post('/create-pw', middleware, async (ctx, next) => {\n\n    try {\n      const params = await controller.createPw(ctx.request.body.pw, ctx.request.body.v);\n\n      ctx.status = params.code;\n      ctx.body = { message: 'Done', data: params };\n    } catch (e) {\n      ctx.status = 500;\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n  return router.middleware();\n};\n\n\n","'use strict';\n\nimport {Mailer} from \"../../mailer/mailer\";\nimport {getRestoreHTML} from \"../../utils/email\";\n\nexport default class UsersController {\n\n    dataService;\n\n    constructor(_dataServiceInstance) {\n        this.dataService = _dataServiceInstance;\n    }\n\n    register(data) {\n        return this.dataService.registerUser(data);\n    }\n\n    getUser(data) {\n        return this.dataService.getUser(data);\n    }\n\n    storeSession(email, ip) {\n        return this.dataService.storeSession(email, ip);\n    }\n\n    destroySession(email) {\n        return this.dataService.destroySession(email);\n    }\n\n    async initRestore(email) {\n        const params = await this.dataService.getRestoreToken(email);\n\n        if (params.data.token) {\n            Mailer.sendPwReset(email, getRestoreHTML(params.data.name, params.data.token))\n        }\n\n        return params;\n    }\n\n    createPw(pw, token) {\n        return this.dataService.createPw(pw, token);\n    }\n\n\n}\n","\n\nexport function getRestoreHTML(name, token) {\n    return `\n        Hi ${name}, <br>\n        Need to reset your password? Click on the link below to get you in.  <br>\n        <a href=\"http://localhost:4000/reset-password?v=${token}\">Create new password</a>\n    `;\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {createPw, login, logout, register, restore} from './_routes';\n\nconst router = new Router();\n\nexport default () => {\n  router.post(register());\n  router.post(login());\n  router.post(logout());\n  router.post(restore());\n  router.post(createPw());\n\n  return router.middleware()\n}\n","export function getClientIp(req) {\n    return req.headers['referer'];\n}\n","'use strict';\n\nimport {authMiddleware} from \"../../../guards/authMiddlware\";\nimport AnalyzeController from \"../controller\";\nimport AnalyzeDataService from \"../data.service\";\nimport {getUserEmailFromSession} from \"../../../utils/session\";\nimport {PredictionTFService} from \"../../../tf/predictionTFService\";\nimport {dissoc, map} from \"ramda\";\n\nconst Router = require('koa-trie-router');\nconst router = new Router();\nconst controller = new AnalyzeController(\n    new AnalyzeDataService(),\n    new PredictionTFService()\n);\n\nexport const getCompletedPredictions = () => {\n  router.post('/completed', authMiddleware, async (ctx, next) => {\n    try {\n      const data = await controller.getAllCompletedPredictions(\n          getUserEmailFromSession(ctx),\n          ctx.request.body\n      );\n\n      ctx.body = { message: 'Done', data: map(dissoc('owner'), data) };\n    } catch (e) {\n      ctx.body = { message: e.message };\n    }\n\n    await next();\n  });\n\n\n  return router.middleware();\n};\n\n","'use strict';\n\nexport default class AnalyzeController {\n\n    tfsService;\n    dataService;\n\n    constructor(_dataServiceInstance, _tfsInstance) {\n        this.dataService = _dataServiceInstance;\n        this.tfsService = _tfsInstance;\n    }\n\n    getAllCompletedPredictions(email, params) {\n        return this.dataService.getAllCompletedPredictions(email, params);\n    }\n\n\n\n\n}\n","import Realm from \"realm\";\nimport {PredictionSchema} from \"../../db/schemes/prediction\";\nimport {appLogger} from \"../../logger\";\n\nexport default class AnalyzeDataService {\n\n    config = {\n        schema: [PredictionSchema],\n        deleteRealmIfMigrationNeeded: true,\n        path: './db/files/predictions/01.realm',\n    };\n\n    getAllCompletedPredictions(email, params) {\n        return Realm.open(this.config)\n            .then(realm => {\n                return realm.objects('Prediction')\n                    .filtered(`owner = \"${email}\" AND finalRate != ${0} AND time >= ${params.dateStart} AND time <= ${params.dateEnd}`)\n                    .sorted('time', true);\n            })\n            .catch((e) => {\n                appLogger.error(e.message)\n            });\n    }\n\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport {getCompletedPredictions} from \"./_routes\";\n\nconst router = new Router();\n\nexport default () => {\n  router.post(getCompletedPredictions());\n\n  return router.middleware()\n}\n","'use strict';\n\nimport Router from 'koa-trie-router';\nimport mount from 'koa-mount';\n\nimport predictions from 'predictions';\nimport ratesScheduler from 'rates-scheduler';\nimport predictionsScheduler from 'predictions-scheduler';\nimport rates from 'rates';\nimport users from 'users';\nimport analyze from 'analyze';\n\nexport const router = new Router();\n\nexport default () => {\n    router.use(mount('/predictions', predictions()));\n    router.use(mount('/rates-scheduler', ratesScheduler()));\n    router.use(mount('/predictions-scheduler', predictionsScheduler()));\n    router.use(mount('/rates', rates()));\n    router.use(mount('/users', users()));\n    router.use(mount('/analyze', analyze()));\n\n    return router.middleware()\n}\n","import serve from 'koa-static'\nimport bodyParser from 'koa-bodyparser'\nimport config from \"./config\";\nimport routes from \"./routes\";\nimport {appLogger} from \"./logger/appLogger\";\n\nconst cors = require('@koa/cors');\nconst mount = require('koa-mount');\nconst session = require('koa-session-auth');\n\nexport const sessionConfig = {\n    useToken: true, /** (boolean) use token-session or not (default true) */\n    useCookie: false, /** (boolean) use cookie-session or not (default true) */\n    key: 'GoAway', /** (string) cookie and token key (default is KoaToken) */\n    /** (number || 'session') maxAge in ms (default is 1 days) */\n    /** 'session' will result in a cookie that expires when session/browser is closed */\n    /** Warning: If a session cookie is stolen, this cookie will never expire */\n    maxAge: 86400000,\n    autoCommit: true, /** (boolean) automatically commit headers (default true) */\n    overwrite: true, /** (boolean) can overwrite or not (default true) */\n    httpOnly: true, /** (boolean) httpOnly or not (default true) */\n    signed: true, /** (boolean) signed or not (default true) */\n    rolling: false, /** (boolean) Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) */\n    renew: false, /** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*/\n    genid: (ctx) => appLogger.warn(ctx)\n};\n\nexport default (app) => {\n    app.use(async (ctx, next) => {\n        try {\n            await next();\n\n            if (ctx.status === 404) {\n                ctx.throw(404)\n            }\n\n            if (ctx.status === 401) {\n                ctx.throw(401)\n            }\n\n            if (ctx.status === 200) {\n                ctx.body = {\n                    status: 200,\n                    data: ctx.body\n                }\n            }\n\n        } catch (err) {\n            appLogger.error(err);\n\n            ctx.status = err.status || 500;\n            ctx.type = 'json';\n            ctx.body = {\n                status: ctx.status,\n                message: err.message\n            };\n\n            ctx.app.emit('error', err, ctx);\n\n        }\n    });\n\n    switch (process.env.NODE_ENV) {\n        case 'development':\n            app.use(cors());\n            break;\n    }\n\n    app.keys = ['11223344qqwweerr'];\n    app.use(bodyParser());\n    app.use(serve(config.static_dir.root));\n    app.use(session(sessionConfig, app));\n    app.use(mount('/api', routes()));\n\n    app.on('error', (err) => {\n        appLogger.error(err.message);\n    });\n\n\n\n\n}\n\n\n","import config from \"./config\";\nimport middlewares from \"./middlewares\";\n\nconst Koa = require('koa');\nconst app = new Koa();\nconst host = process.env.HOST || '127.0.0.1';\nconst port = process.env.PORT || config.server.port;\n\nmiddlewares(app);\n\napp.listen(port, host);\n"],"sourceRoot":""}